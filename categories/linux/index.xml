<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Linux on Jacob&#39;s Thoughts</title>
    <link>https://weixiang.github.io/categories/linux/</link>
    <description>Recent content in Linux on Jacob&#39;s Thoughts</description>
    <generator>Hugo -- 0.146.4</generator>
    <language>zh</language>
    <copyright>©2017-2025 Jacob&amp;rsquo;s Thoughts</copyright>
    <lastBuildDate>Sat, 28 Oct 2023 03:57:20 +0800</lastBuildDate>
    <atom:link href="https://weixiang.github.io/categories/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>群晖 DSM Docker 更改 Bridge 网段及配置镜像源</title>
      <link>https://weixiang.github.io/posts/changing-dockers-bridge-segment-in-dsm-and-configuring-the-mirror-source/</link>
      <pubDate>Sat, 28 Oct 2023 03:57:20 +0800</pubDate>
      <guid>https://weixiang.github.io/posts/changing-dockers-bridge-segment-in-dsm-and-configuring-the-mirror-source/</guid>
      <description>由于群晖 Docker 套件的 Bridge 网桥默认的网段很容易和现有网段冲突，需要避开才可正常通信。本文记录了如何更改 Container Manager 的网段和配置国内加速镜像源。</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>2024 年 8 月 8 日更新：</p>
<p>由于某些众所周知的原因，国内 Docker 镜像已经成为历史，本文已不具有可行性，仅供参考。</p>
<hr>
<p>由于群晖 Docker 套件，其 Bridge 网桥默认的网段为 172 段，很容易和现有网段冲突，导致发包错误，需要避开才可正常通信。</p>
<h2 id="docker-配置文件位置">Docker 配置文件位置</h2>
<p>先开启 DSM 的 SSH 登录，然后通过 SSH 连接到 DSM。</p>
<p>DSM7.2 前，使用以下命令。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">sudo vim /var/packages/Docker/etc/dockerd.json
</span></span></code></pre></div><p>DSM7.2 后 Docker 更名为 Container Manager，并升级了 UI 以便于更新和清理容器。因此路径也需要更改。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">sudo vim /var/packages/ContainerManager/etc/dockerd.json
</span></span></code></pre></div><p>清空内容小技巧：</p>
<ol>
<li>（vi 进入文件后）在命令模式下，先执行 gg(跳转光标至文件首行)；</li>
<li>再执行 dG，这样就清空了整个文件。</li>
</ol>
<h2 id="修改配置文件">修改配置文件</h2>
<p>DSM7.2 前，使用以下配置。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;data-root&#34;</span><span class="p">:</span> <span class="s2">&#34;/var/packages/Docker/var/docker&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;log-driver&#34;</span><span class="p">:</span> <span class="s2">&#34;db&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;storage-driver&#34;</span><span class="p">:</span> <span class="s2">&#34;btrfs&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;registry-mirrors&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;https://docker.mirrors.ustc.edu.cn&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;https://hub-mirror.c.163.com&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;https://registry.docker-cn.com&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;bip&#34;</span><span class="p">:</span> <span class="s2">&#34;192.168.10.1/24&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;default-address-pools&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;base&#34;</span><span class="p">:</span> <span class="s2">&#34;192.168.10.0/24&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">24</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>DSM7.2 后，使用以下配置。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;data-root&#34;</span><span class="p">:</span> <span class="s2">&#34;/var/packages/ContainerManager/var/docker&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;log-driver&#34;</span><span class="p">:</span> <span class="s2">&#34;db&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;storage-driver&#34;</span><span class="p">:</span> <span class="s2">&#34;btrfs&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;registry-mirrors&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;https://docker.mirrors.ustc.edu.cn&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;https://hub-mirror.c.163.com&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;https://registry.docker-cn.com&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;bip&#34;</span><span class="p">:</span> <span class="s2">&#34;192.168.10.1/24&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;default-address-pools&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;base&#34;</span><span class="p">:</span> <span class="s2">&#34;192.168.10.0/24&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">24</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>提醒：配置不可省略 data-root 路径，否则配置不生效。</p>
<h2 id="重启-docker">重启 Docker</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">systemctl daemon-reload
</span></span><span class="line"><span class="cl">systemctl restart pkgctl-Docker <span class="c1"># DSM7.2前</span>
</span></span><span class="line"><span class="cl">systemctl restart pkgctl-ContainerManager <span class="c1"># DSM7.2后</span>
</span></span></code></pre></div><h2 id="附录常见国内加速镜像源">附录：常见国内加速镜像源</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl">  <span class="s2">&#34;registry-mirrors&#34;</span><span class="err">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;https://docker.mirrors.ustc.edu.cn&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;https://hub-mirror.c.163.com&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;https://registry.docker-cn.com&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">]</span>
</span></span></code></pre></div><p>阿里云镜像加速器获取：<a href="https://help.aliyun.com/zh/acr/user-guide/accelerate-the-pulls-of-docker-official-images">https://help.aliyun.com/zh/acr/user-guide/accelerate-the-pulls-of-docker-official-images</a></p>
<h2 id="参考文献">参考文献</h2>
<p><a href="https://www.ithome.com/0/680/524.htm">https://www.ithome.com/0/680/524.htm</a>
<a href="https://cr.console.aliyun.com">https://cr.console.aliyun.com</a>
<a href="https://help.aliyun.com/zh/acr/user-guide/accelerate-the-pulls-of-docker-official-images">https://help.aliyun.com/zh/acr/user-guide/accelerate-the-pulls-of-docker-official-images</a>
<a href="https://community.synology.com/enu/forum/17/post/107492">https://community.synology.com/enu/forum/17/post/107492</a>
<a href="https://support.hyperglance.com/knowledge/changing-the-default-docker-subnet">https://support.hyperglance.com/knowledge/changing-the-default-docker-subnet</a>
<a href="https://www.synoforum.com/threads/docker-restart-on-cli.4678/">https://www.synoforum.com/threads/docker-restart-on-cli.4678/</a>
<a href="https://gist.github.com/styblope/dc55e0ad2a9848f2cc3307d4819d819f">https://gist.github.com/styblope/dc55e0ad2a9848f2cc3307d4819d819f</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>FRP 部署笔记</title>
      <link>https://weixiang.github.io/posts/frp-deployment-notes/</link>
      <pubDate>Fri, 13 Oct 2023 02:12:06 +0800</pubDate>
      <guid>https://weixiang.github.io/posts/frp-deployment-notes/</guid>
      <description>frp 是一个专注于内网穿透的高性能的反向代理应用，支持 TCP、UDP、HTTP、HTTPS 等多种协议，且支持 P2P 通信。可以将内网服务以安全、便捷的方式通过具有公网 IP 节点的中转暴露到公网。</description>
      <content:encoded><![CDATA[<h2 id="服务端">服务端</h2>
<p>下载安装包</p>
<p>在 <a href="https://github.com/fatedier/frp/releases">https://github.com/fatedier/frp/releases</a> 中下载对应架构的安装包，解压放置到 /usr/local 目录下。</p>
<p>使用 Docker</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">docker run --restart<span class="o">=</span>always --network host -d -v /opt/frp:/etc/frp --name frps snowdreamtech/frps
</span></span></code></pre></div><h2 id="编写配置文件">编写配置文件</h2>
<p>根据业务需求修改 frps.ini</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">vim /usr/local/frp/frps.ini
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ini" data-lang="ini"><span class="line"><span class="cl"><span class="k">[common]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 绑定端口</span>
</span></span><span class="line"><span class="cl"><span class="na">bind_port</span> <span class="o">=</span> <span class="s">7000</span>
</span></span><span class="line"><span class="cl"><span class="c1"># bind_udp_port = 7001</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 管理面板</span>
</span></span><span class="line"><span class="cl"><span class="na">dashboard_addr</span> <span class="o">=</span> <span class="s">0.0.0.0</span>
</span></span><span class="line"><span class="cl"><span class="na">dashboard_port</span> <span class="o">=</span> <span class="s">7500</span>
</span></span><span class="line"><span class="cl"><span class="na">dashboard_user</span> <span class="o">=</span> <span class="s">admin</span>
</span></span><span class="line"><span class="cl"><span class="na">dashboard_pwd</span> <span class="o">=</span> <span class="s">passwd</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 使用宝塔的自签证书</span>
</span></span><span class="line"><span class="cl"><span class="na">dashboard_tls_mode</span> <span class="o">=</span> <span class="s">true</span>
</span></span><span class="line"><span class="cl"><span class="na">dashboard_tls_cert_file</span> <span class="o">=</span> <span class="s">/www/server/panel/ssl/certificate.pem</span>
</span></span><span class="line"><span class="cl"><span class="na">dashboard_tls_key_file</span> <span class="o">=</span> <span class="s">/www/server/panel/ssl/privateKey.pem</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 日志</span>
</span></span><span class="line"><span class="cl"><span class="c1"># log_file = ./frps.log</span>
</span></span><span class="line"><span class="cl"><span class="c1"># trace, debug, info, warn, error</span>
</span></span><span class="line"><span class="cl"><span class="na">log_level</span> <span class="o">=</span> <span class="s">info</span>
</span></span><span class="line"><span class="cl"><span class="na">log_max_days</span> <span class="o">=</span> <span class="s">7</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># auth token</span>
</span></span><span class="line"><span class="cl"><span class="na">token</span> <span class="o">=</span> <span class="s">yourtoken</span>
</span></span></code></pre></div><p>根据配置文件开放对应端口，测试运行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="nb">cd</span> /usr/local/frp
</span></span><span class="line"><span class="cl">./frps -c ./frps.ini
</span></span></code></pre></div><h2 id="使用-systemd-持久化运行">使用 systemd 持久化运行</h2>
<p>安装 systemd</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># yum</span>
</span></span><span class="line"><span class="cl">yum install systemd
</span></span><span class="line"><span class="cl"><span class="c1"># apt</span>
</span></span><span class="line"><span class="cl">apt install systemd
</span></span></code></pre></div><p>使用文本编辑器，如 vim 创建并编辑 frps.service 文件</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">vim /etc/systemd/system/frps.service
</span></span></code></pre></div><p>写入内容</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ini" data-lang="ini"><span class="line"><span class="cl"><span class="k">[Unit]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 服务名称，可自定义</span>
</span></span><span class="line"><span class="cl"><span class="na">Description</span> <span class="o">=</span> <span class="s">frp server</span>
</span></span><span class="line"><span class="cl"><span class="na">After</span> <span class="o">=</span> <span class="s">network.target syslog.target</span>
</span></span><span class="line"><span class="cl"><span class="na">Wants</span> <span class="o">=</span> <span class="s">network.target</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">[Service]</span>
</span></span><span class="line"><span class="cl"><span class="na">Type</span> <span class="o">=</span> <span class="s">simple</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 启动 frps 的命令，需修改为您的 frps 的安装路径</span>
</span></span><span class="line"><span class="cl"><span class="na">ExecStart</span> <span class="o">=</span> <span class="s">/usr/local/frp/frps -c /usr/local/frp/frps.ini</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">[Install]</span>
</span></span><span class="line"><span class="cl"><span class="na">WantedBy</span> <span class="o">=</span> <span class="s">multi-user.target</span>
</span></span></code></pre></div><p>使用 systemd 命令，管理 frps。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># 启动frp</span>
</span></span><span class="line"><span class="cl">systemctl start frps
</span></span><span class="line"><span class="cl"><span class="c1"># 停止frp</span>
</span></span><span class="line"><span class="cl">systemctl stop frps
</span></span><span class="line"><span class="cl"><span class="c1"># 重启frp</span>
</span></span><span class="line"><span class="cl">systemctl restart frps
</span></span><span class="line"><span class="cl"><span class="c1"># 查看frp状态</span>
</span></span><span class="line"><span class="cl">systemctl status frps
</span></span><span class="line"><span class="cl"><span class="c1"># 查看frp日志</span>
</span></span><span class="line"><span class="cl">journalctl -u frps
</span></span><span class="line"><span class="cl">tail -f /usr/local/frp/frps.ini
</span></span></code></pre></div><p>配置 frps 开机自启。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">systemctl <span class="nb">enable</span> frps
</span></span></code></pre></div><h2 id="客户端">客户端</h2>
<p>在 <a href="https://github.com/fatedier/frp/releases">https://github.com/fatedier/frp/releases</a> 中下载对应架构的安装包，或使用 Docker 部署。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ini" data-lang="ini"><span class="line"><span class="cl"><span class="k">[common]</span>
</span></span><span class="line"><span class="cl"><span class="na">server_addr</span> <span class="o">=</span> <span class="s">服务器地址</span>
</span></span><span class="line"><span class="cl"><span class="na">server_port</span> <span class="o">=</span> <span class="s">7000</span>
</span></span><span class="line"><span class="cl"><span class="na">token</span> <span class="o">=</span> <span class="s">yourtoken</span>
</span></span><span class="line"><span class="cl"><span class="na">tls_enable</span> <span class="o">=</span>  <span class="s">true</span>
</span></span><span class="line"><span class="cl"><span class="c1"># http_proxy = socks5://192.168.31.166:7890</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">[dsm]</span>
</span></span><span class="line"><span class="cl"><span class="na">type</span> <span class="o">=</span> <span class="s">tcp</span>
</span></span><span class="line"><span class="cl"><span class="na">use_encryption</span> <span class="o">=</span> <span class="s">true</span>
</span></span><span class="line"><span class="cl"><span class="na">local_ip</span> <span class="o">=</span> <span class="s">127.0.0.1</span>
</span></span><span class="line"><span class="cl"><span class="na">local_port</span> <span class="o">=</span> <span class="s">5000</span>
</span></span><span class="line"><span class="cl"><span class="na">remote_port</span> <span class="o">=</span> <span class="s">7006</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">[jellyfin]</span>
</span></span><span class="line"><span class="cl"><span class="na">type</span> <span class="o">=</span> <span class="s">tcp</span>
</span></span><span class="line"><span class="cl"><span class="na">use_encryption</span> <span class="o">=</span> <span class="s">true</span>
</span></span><span class="line"><span class="cl"><span class="na">local_ip</span> <span class="o">=</span> <span class="s">127.0.0.1</span>
</span></span><span class="line"><span class="cl"><span class="na">local_port</span> <span class="o">=</span> <span class="s">8096</span>
</span></span><span class="line"><span class="cl"><span class="na">remote_port</span> <span class="o">=</span> <span class="s">7007</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">[homeassistance]</span>
</span></span><span class="line"><span class="cl"><span class="na">type</span> <span class="o">=</span> <span class="s">tcp</span>
</span></span><span class="line"><span class="cl"><span class="na">use_encryption</span> <span class="o">=</span> <span class="s">true</span>
</span></span><span class="line"><span class="cl"><span class="na">local_ip</span> <span class="o">=</span> <span class="s">127.0.0.1</span>
</span></span><span class="line"><span class="cl"><span class="na">local_port</span> <span class="o">=</span> <span class="s">8123</span>
</span></span><span class="line"><span class="cl"><span class="na">remote_port</span> <span class="o">=</span> <span class="s">7008</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">[openvpn]</span>
</span></span><span class="line"><span class="cl"><span class="na">type</span> <span class="o">=</span> <span class="s">tcp</span>
</span></span><span class="line"><span class="cl"><span class="na">use_encryption</span> <span class="o">=</span> <span class="s">true</span>
</span></span><span class="line"><span class="cl"><span class="na">local_ip</span> <span class="o">=</span> <span class="s">127.0.0.1</span>
</span></span><span class="line"><span class="cl"><span class="na">local_port</span> <span class="o">=</span> <span class="s">1194</span>
</span></span><span class="line"><span class="cl"><span class="na">remote_port</span> <span class="o">=</span> <span class="s">7009</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">[dsm1-https2http]</span>
</span></span><span class="line"><span class="cl"><span class="na">type</span> <span class="o">=</span> <span class="s">tcp</span>
</span></span><span class="line"><span class="cl"><span class="na">local_ip</span> <span class="o">=</span> <span class="s">172.17.0.1</span>
</span></span><span class="line"><span class="cl"><span class="na">remote_port</span> <span class="o">=</span> <span class="s">40020</span>
</span></span><span class="line"><span class="cl"><span class="na">plugin</span> <span class="o">=</span> <span class="s">https2http</span>
</span></span><span class="line"><span class="cl"><span class="na">plugin_local_addr</span> <span class="o">=</span> <span class="s">172.17.0.1:5000</span>
</span></span><span class="line"><span class="cl"><span class="na">plugin_crt_path</span> <span class="o">=</span> <span class="s">/etc/frp/example.com.pem</span>
</span></span><span class="line"><span class="cl"><span class="na">plugin_key_path</span> <span class="o">=</span> <span class="s">/etc/frp/example.com.key</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Debian 11 宝塔安装 Flarum</title>
      <link>https://weixiang.github.io/posts/debian11-baotapanel-installation-flarum/</link>
      <pubDate>Wed, 11 Oct 2023 18:06:25 +0800</pubDate>
      <guid>https://weixiang.github.io/posts/debian11-baotapanel-installation-flarum/</guid>
      <description>本文介绍如何在 Debian 11 宝塔环境安装 Flarum。Flarum 是一款用于网络论坛的自由软件，主要用 PHP 编写，但其用户界面的代码结合了 JavaScript 和 TypeScript 两种语言。它是由两个论坛软件 FluxBB 和 esoTalk 合并而来。Flarum 被设计为具有高可扩展性的极简论坛软件。</description>
      <content:encoded><![CDATA[<h2 id="服务器要求">服务器要求</h2>
<ul>
<li><strong>Apache</strong> (with mod_rewrite enabled) or <strong>Nginx</strong></li>
<li><strong>PHP 8.0+</strong> with the following extensions: curl, dom, fileinfo, gd, json, mbstring, openssl, pdo_mysql, tokenizer, zip</li>
<li><strong>MySQL 8.0.23+</strong> or <strong>MariaDB 10.0.5+</strong></li>
<li><strong>SSH (command-line) access</strong> to run Composer</li>
</ul>
<p>宝塔 7.0.7 及以上使用默认的一键安装配置即可。</p>
<h2 id="安装宝塔面板">安装宝塔面板</h2>
<p>安装完成后，选择一键安装 LNMP 环境。</p>
<h2 id="配置-php-环境">配置 PHP 环境</h2>
<p>在软件商店，配置 PHP。</p>
<ol>
<li>在【安装扩展】中，安装 <code>fileinfo</code>、<code>opcache</code>、<code>exif</code>、<code>bz2</code>、<code>pdo_pgsql</code></li>
<li>在【禁用函数】中，删除 <code>putenv</code>、 <code>pcntl_signal</code> 以及 <code>proc_open</code></li>
<li>设置 PHP 配置如下</li>
</ol>
<blockquote>
<p>2024 年 8 月 11 日更新：
根据官方文档应该只需要 <code>fileinfo</code> 、<code>mbstring</code> 、<code>exif</code></p></blockquote>
<p>最大脚本运行时间（<code>max_execution_time</code>）：600</p>
<p>脚本内存限制（<code>memory_limit</code>）：512M 或 1024M</p>
<h2 id="安装-composer">安装 Composer</h2>
<blockquote>
<p>2024 年 8 月 12 日更新：
宝塔版本 7.0.7 默认的 PHP 8.3 插件似乎已经自带了 Composer，不用另外安装了。</p></blockquote>
<p>更新软件包并安装依赖</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo apt update
</span></span><span class="line"><span class="cl">sudo apt install curl php-cli php-mbstring git unzip
</span></span></code></pre></div><p>下载安装 Composer</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> ~
</span></span><span class="line"><span class="cl">curl -sS https://getcomposer.org/installer -o composer-setup.php
</span></span><span class="line"><span class="cl"><span class="nv">HASH</span><span class="o">=</span><span class="sb">`</span>curl -sS https://composer.github.io/installer.sig<span class="sb">`</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="nv">$HASH</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">php -r <span class="s2">&#34;if (hash_file(&#39;SHA384&#39;, &#39;composer-setup.php&#39;) === &#39;</span><span class="nv">$HASH</span><span class="s2">&#39;) { echo &#39;Installer verified&#39;; } else { echo &#39;Installer corrupt&#39;; unlink(&#39;composer-setup.php&#39;); } echo PHP_EOL;&#34;</span>
</span></span><span class="line"><span class="cl">sudo php composer-setup.php --install-dir<span class="o">=</span>/usr/local/bin --filename<span class="o">=</span>composer
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">composer
</span></span></code></pre></div><p>删除安装脚本</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">php -r <span class="s2">&#34;unlink(&#39;composer-setup.php&#39;);&#34;</span>
</span></span></code></pre></div><h2 id="安装-flarum">安装 Flarum</h2>
<p>前往宝塔面板 – 【网站】 – 【添加站点】，同时创建用于 Flarum 的数据库。最后提交。</p>
<p>务必注意！数据库字符集一定要是 <code>utf8mb4</code>，至于为什么是 <code>utf8mb4</code>，参考：<a href="https://www.jianshu.com/p/6967ce16a202">https://www.jianshu.com/p/6967ce16a202</a></p>
<p>配置 SSL 证书，请注意开启“强制 HTTPS”！</p>
<p>删除文章目录下的<strong>所有</strong>文件。</p>
<h3 id="下载-flarum">下载 Flarum</h3>
<p>定位到网站目录，执行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">composer create-project flarum/flarum .
</span></span></code></pre></div><h2 id="配置运行">配置运行</h2>
<h3 id="修改-nginx-配置">修改 Nginx 配置</h3>
<p>进入宝塔面板，打开站点设置，修改网站配置文件：</p>
<p><strong>root</strong>：需要在路径后面加上 <code>public</code>，比如原本是 <code>root /www/wwwroot/example.com;</code>，需要修改为 <code>root /www/wwwroot/example.com/public;</code>。</p>
<p>引入 Flarum 提供的伪静态配置，在 <code>server name</code> 下方加上 <code>include /www/wwwroot/example.com/.nginx.conf;</code>，网站目录不要忘记更换成自己的。</p>
<h2 id="权限修改">权限修改</h2>
<p>若搭建完成后，页面出现权限报错，无法启动，则需要修改根目录权限为 775，同时所有权为 www。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">chmod <span class="m">775</span> -R /path/to/directory
</span></span><span class="line"><span class="cl">chown -R www-data:www-data /path/to/directory
</span></span></code></pre></div><h2 id="参考文献">参考文献</h2>
<ul>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-use-composer-on-debian-11">https://www.digitalocean.com/community/tutorials/how-to-install-and-use-composer-on-debian-11</a></li>
<li><a href="https://discuss.flarum.org.cn/d/2195/2">https://discuss.flarum.org.cn/d/2195</a></li>
<li><a href="https://docs.flarum.org/install/">https://docs.flarum.org/install/</a></li>
</ul>
<h2 id="更新记录">更新记录</h2>
<p>2024 年 8 月 12 日：更新宝塔 7.0.7 安装</p>
]]></content:encoded>
    </item>
    <item>
      <title>自己编译 OpenWRT</title>
      <link>https://weixiang.github.io/posts/compile-openwrt-yourself/</link>
      <pubDate>Fri, 12 May 2023 14:21:36 +0800</pubDate>
      <guid>https://weixiang.github.io/posts/compile-openwrt-yourself/</guid>
      <description>以 X-WRT 为例，使用 Ubuntu 22.04 LTS 系统，自己为红米 AC2100 编译一个 OpenWRT 路由器固件。</description>
      <content:encoded><![CDATA[<p>以 X-WRT 为例，使用 Ubuntu 22.04 LTS 系统，建议使用国外服务器编译。</p>
<h2 id="编译准备">编译准备</h2>
<p>不要用<code>root</code>用户进行编译操作，因此需要先新建一个用户，并且授予<code>root</code>权限</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># Login via SSH</span>
</span></span><span class="line"><span class="cl">ssh root@your_server_ip
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Create a new user and follow prompts</span>
</span></span><span class="line"><span class="cl">adduser &lt;user&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Add user to superuser group to unlock admin privileges</span>
</span></span><span class="line"><span class="cl">usermod -aG sudo &lt;user&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Then log in as the new user</span>
</span></span><span class="line"><span class="cl">su - &lt;user&gt;
</span></span></code></pre></div><p>更新软件包并安装依赖</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># Update package lists</span>
</span></span><span class="line"><span class="cl">sudo apt-get update
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Update installed packages</span>
</span></span><span class="line"><span class="cl">sudo apt-get upgrade
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo apt install build-essential ecj fastjar file flex g++ gcc-multilib g++-multilib gawk gettext git git-core java-propose-classpath libelf-dev libncurses5-dev libncursesw5-dev libssl-dev swig python3 python3-distutils subversion unzip wget zlib1g-dev rsync qemu-utils
</span></span></code></pre></div><p>下载源码</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone https://github.com/x-wrt/x-wrt.git
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> x-wrt
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#更新代码tag:</span>
</span></span><span class="line"><span class="cl">git fetch origin
</span></span><span class="line"><span class="cl">git fetch origin --tags
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#列出可以使用的版本tag:</span>
</span></span><span class="line"><span class="cl">git tag
</span></span><span class="line"><span class="cl"><span class="c1">#注意按 q 键结束</span>
</span></span><span class="line"><span class="cl"><span class="c1">#或者直接获取最新发布版本</span>
</span></span><span class="line"><span class="cl">git describe --tags <span class="k">$(</span>git rev-list --tags --max-count<span class="o">=</span>1<span class="k">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#选择并切换到指定的版本tag:</span>
</span></span><span class="line"><span class="cl">git checkout -f &lt;tag-name&gt;
</span></span><span class="line"><span class="cl"><span class="c1">#例如</span>
</span></span><span class="line"><span class="cl">git checkout -f 21.10_b202112032317
</span></span><span class="line"><span class="cl"><span class="c1">#或者</span>
</span></span><span class="line"><span class="cl">git checkout -f <span class="k">$(</span>git describe --tags <span class="k">$(</span>git rev-list --tags --max-count<span class="o">=</span>1<span class="k">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#更新代码:</span>
</span></span><span class="line"><span class="cl">./scripts/feeds update -a
</span></span><span class="line"><span class="cl">./scripts/feeds install -a
</span></span></code></pre></div><p>然后就可以使用<code>make menuconfig</code>进行固件配置，但是我们可以从配置模版开始会更轻松一些。</p>
<p>比如 ramips-mt7621 的设备可以用拷贝这个模版<code>feeds/x/rom/lede/config.ramips-mt7621</code> 内核分区限制小的设备，选用 <code>-nosymbol</code> 结尾的<code>config</code>配置模版。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 0 拷贝模板到根目录</span>
</span></span><span class="line"><span class="cl">cp feeds/x/rom/lede/config.ramips-mt7621 .config
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 1 执行</span>
</span></span><span class="line"><span class="cl">make menuconfig
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 2 进入 Target Profile 选择需要编译打包的设备型号，选择型号后立刻退出，保存</span>
</span></span></code></pre></div><p><img loading="lazy" src="https://jacob-1256058189.cos.ap-guangzhou.myqcloud.com/markdown/202408101754249.webp"></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1">#3 执行下面的命令修复 .config</span>
</span></span><span class="line"><span class="cl">sh feeds/x/rom/lede/fix-config.sh
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#4 再次执行 make menuconfig 然后立刻退出保存</span>
</span></span><span class="line"><span class="cl">make menuconfig
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#5 最后一次 执行 make menuconfig 自定义选择你需要的软件包</span>
</span></span><span class="line"><span class="cl">make menuconfig
</span></span></code></pre></div><h2 id="配置目标可选项">配置目标（可选项）</h2>
<p>在上述准备好的模版配置文件的基础上，执行<code>make menuconfig</code>命令进行个性化定制，增删应用。</p>
<p>定位到各个子菜单，选择对应的软件包。</p>
<p><img loading="lazy" src="https://jacob-1256058189.cos.ap-guangzhou.myqcloud.com/markdown/202408101754239.webp"></p>
<h3 id="添加自定义源">添加自定义源</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 进入openwrt目录</span>
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> ~/openwrt
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 添加自定义源</span>
</span></span><span class="line"><span class="cl">cat &gt;&gt; feeds.conf.default <span class="s">&lt;&lt;EOF
</span></span></span><span class="line"><span class="cl"><span class="s">src-git kenzo https://github.com/kenzok8/openwrt-packages
</span></span></span><span class="line"><span class="cl"><span class="s">src-git passwall https://github.com/xiaorouji/openwrt-passwall
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span></code></pre></div><p>更新下载软件仓库的源码到本地，并安装自定义源包含的软件包</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">./scripts/feeds update -a <span class="o">&amp;&amp;</span> ./scripts/feeds install -a
</span></span></code></pre></div><h3 id="添加插件">添加插件</h3>
<p>首先，进入<code>make menuconfig</code>菜单</p>
<p><strong>要编译到固件里面，就要选择<code>&lt;\*&gt;</code>，如果只选择<code>&lt;M&gt;</code>只是编译成软件包<code>ipk</code>，不会打包进入固件。</strong></p>
<p>进入<code>LuCI - Applications</code>子菜单下面，选择自己想要的应用</p>
<p>进入<code>Kernel modules - USB Support</code>菜单，选择 USB 支持的驱动</p>
<p>进入<code>Kernel modules - Filesystems</code>菜单，选择需要支持的文件系统，比如<code>ext4,ntfs,vfat</code>等</p>
<p>进入<code>Kernel modules - Wireless Drivers</code>菜单，选择无线支持的驱动，如果需要挂卡的驱动，也是在这里找</p>
<h3 id="单独添加软件包">单独添加软件包</h3>
<p>如果需要单独添加软件，请拉取源码到 package 目录之下。示例如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 添加 OpenAppFilter 应用过滤插件</span>
</span></span><span class="line"><span class="cl">git clone https://github.com/destan19/OpenAppFilter package/OpenAppFilter
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 添加 OpenClash</span>
</span></span><span class="line"><span class="cl">git clone https://github.com/vernesong/OpenClash.git
</span></span><span class="line"><span class="cl">mv OpenClash/luci-app-openclash package/
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 添加 eqos</span>
</span></span><span class="line"><span class="cl">git clone https://github.com/zhaojh329/eqos.git package/
</span></span></code></pre></div><p>执行<code>make menuconfig</code>进行配置</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">OpenClash:
</span></span><span class="line"><span class="cl">LuCI &gt; Applications &gt; luci-app-openclash
</span></span><span class="line"><span class="cl">Kernel modules &gt; Network Support &gt; kmod-tun
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">OpenClash 需要排除 dnsmasq，安装 dnsmasq-full，不排除会冲突:
</span></span><span class="line"><span class="cl">Base system &gt; dnsmasq
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">eqos:
</span></span><span class="line"><span class="cl">LuCI &gt; Applications &gt; luci-app-eqos
</span></span><span class="line"><span class="cl">Network &gt; eqos
</span></span></code></pre></div><h3 id="设置默认主题">设置默认主题</h3>
<p>注：此操作请在编译前执行，设置 ar­gon 为默认主题，以此为例举一反三</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 删除自定义源默认的 argon 主题</span>
</span></span><span class="line"><span class="cl">rm -rf package/lean/luci-theme-argon
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 部分第三方源自带 argon 主题，上面命令删除不掉的请运行下面命令</span>
</span></span><span class="line"><span class="cl">find ./ -name luci-theme-argon <span class="p">|</span> xargs rm -rf<span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 针对 LEDE 项目拉取 argon 原作者的源码</span>
</span></span><span class="line"><span class="cl">git clone -b 18.06 https://github.com/jerrykuku/luci-theme-argon.git package/lean/luci-theme-argon
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 替换默认主题为 luci-theme-argon</span>
</span></span><span class="line"><span class="cl">sed -i <span class="s1">&#39;s/luci-theme-bootstrap/luci-theme-argon/&#39;</span> feeds/luci/collections/luci/Makefile
</span></span></code></pre></div><h3 id="设置路由器默认的-lan-ip">设置路由器默认的 LAN IP</h3>
<p>注：此操作请在编译前执行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 设置默认IP为 192.168.199.1</span>
</span></span><span class="line"><span class="cl">sed -i <span class="s1">&#39;s/192.168.1.1/192.168.199.1/g&#39;</span> package/base-files/files/bin/config_generate
</span></span></code></pre></div><h2 id="执行编译">执行编译</h2>
<p>命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">make
</span></span></code></pre></div><p>或者</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># -j1：单线程编译</span>
</span></span><span class="line"><span class="cl">make -j1 <span class="nv">V</span><span class="o">=</span>s
</span></span></code></pre></div><p>单线程编译可提高编译成功率，但过程非常漫长，也完全取决于机器的性能。</p>
<p>编译完成后固件输出路径：<code>bin/targets/</code>下面。</p>
<p>如果需要再次修改配置编译，只要不是换设备，都可以直接 <code>make menuconfig</code> 修改后就编译，如果需要修改设备，请从拷贝模版配置的地方重新开始配置。</p>
<h3 id="二次编译步骤">二次编译步骤</h3>
<p>更新本地编译环境</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 更新软件列表、升级软件包</span>
</span></span><span class="line"><span class="cl">sudo sh -c <span class="s2">&#34;apt update &amp;&amp; apt upgrade -y&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 拉取最新源码</span>
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> ~/openwrt <span class="o">&amp;&amp;</span> git pull
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 更新下载安装订阅源包含的软件包</span>
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> ~/openwrt
</span></span><span class="line"><span class="cl">./scripts/feeds update -a <span class="o">&amp;&amp;</span> ./scripts/feeds install -a
</span></span></code></pre></div><p>清理旧文件</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 删除/bin和/build_dir目录中的文件</span>
</span></span><span class="line"><span class="cl">make clean
</span></span></code></pre></div><p>如果要更换架构，例如要从 <code>x86_64</code> 换到 <code>MediaTek Ralink MIPS</code> 建议执行以下命令深度清理 <code>/bin</code> 和 <code>/build_dir</code> 目录的中的文件 (<code>make clean</code>) 以及 <code>/staging_dir</code>、<code>/toolchain</code>、<code>/tmp</code> 和 <code>/logs</code> 中的文件。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">make dirclean
</span></span></code></pre></div><p>如果需要对组件重新调整，则建议先删除旧配置</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">rm -rf ./tmp <span class="o">&amp;&amp;</span> rm -rf .config
</span></span></code></pre></div><p>根据自己的定制需求，再次调整 Open­Wrt 系统组件</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">make menuconfig
</span></span></code></pre></div><p>下载编译所需的软件包</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">make download -j8 <span class="nv">V</span><span class="o">=</span>s
</span></span></code></pre></div><p>编译 Open­Wrt 固件</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">make -j<span class="k">$(</span>nproc<span class="k">)</span> <span class="o">||</span> make -j1 <span class="o">||</span> make -j1 <span class="nv">V</span><span class="o">=</span>s
</span></span></code></pre></div><p>二次编译可以优先使用多线程，报错会自动使用单线程，仍然报错会单线程执行编译并输出详细日志。</p>
<h2 id="附录">附录</h2>
<h3 id="常用插件列表">常用插件列表</h3>
<p>在调整 Open­Wrt 系统组件时：<code>[*]</code>表示编译软件包并加入到固件；<code>[M]</code> 表示编译软件包但不加入固件；<code>[ ]</code> 则表示不对软件包进行任何设置。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 常见</span>
</span></span><span class="line"><span class="cl">luci-app-aria2 ARRIA2下载工具
</span></span><span class="line"><span class="cl">luci-app-ddns DDNS工具
</span></span><span class="line"><span class="cl">luci-app-mwan3 MWAN3负载均衡
</span></span><span class="line"><span class="cl">luci-app-openvpn OPENVPN
</span></span><span class="line"><span class="cl">luci-app-ksmbd Ksmbd文件网络共享（samba文件共享）
</span></span><span class="line"><span class="cl">luci-app-upnp UPNP设置
</span></span><span class="line"><span class="cl">luci-app-wireguard WireGuard配置界面
</span></span><span class="line"><span class="cl">luci-app-natcap 远程界面管理模块和全锥形nat实现模块
</span></span><span class="line"><span class="cl">luci-app-natflow-users 用户认证（用户流量显示）模块
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">## 插件类</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Applications ---&gt; luci-app-accesscontrol <span class="c1">#上网时间控制</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Applications ---&gt; luci-app-adbyby-plus   <span class="c1">#去广告</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Applications ---&gt; luci-app-arpbind  <span class="c1">#IP/MAC绑定</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Applications ---&gt; luci-app-autoreboot  <span class="c1">#高级重启</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Applications ---&gt; luci-app-aliddns   <span class="c1">#阿里DDNS客户端</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Applications ---&gt; luci-app-ddns   <span class="c1">#动态域名 DNS</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Applications ---&gt; luci-app-filetransfer  <span class="c1">#文件传输</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Applications ---&gt; luci-app-firewall   <span class="c1">#添加防火墙</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Applications ---&gt; luci-app-frpc   <span class="c1">#内网穿透 Frp</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Applications ---&gt; luci-app-mwan3   <span class="c1">#MWAN负载均衡</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Applications ---&gt; luci-app-nlbwmon   <span class="c1">#网络带宽监视器</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Applications ---&gt; luci-app-ramfree  <span class="c1">#释放内存</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Applications ---&gt; luci-app-samba   <span class="c1">#网络共享(Samba)</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Applications ---&gt; luci-app-sqm  <span class="c1">#流量智能队列管理(QOS)</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Applications ---&gt; luci-app-openclash <span class="c1">#你懂的那只猫</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Applications ---&gt; luci-app-dnsfilter <span class="c1">#广告过滤</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Applications ---&gt; luci-app-passwall <span class="c1">#不敢解释</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Applications ---&gt; luci-app-mtwifi <span class="c1">#闭源Wi-Fi驱动</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Applications ---&gt; luci-app-eqos <span class="c1">#根据IP控制网速</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Applications ---&gt; luci-app-syncdial <span class="c1">#薛定谔的多拨应用</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Applications ---&gt; luci-app-zerotier <span class="c1">#虚拟局域网</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Applications ---&gt; luci-app-oaf <span class="c1">#应用过滤神器</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Applications ---&gt; luci-app-watchcat <span class="c1">#断网检测功能与定时重启</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Applications ---&gt; luci-app-wol   <span class="c1">#WOL网络唤醒</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Applications ---&gt; luci-app-wrtbwmon  <span class="c1">#实时流量监测</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Applications ---&gt; luci-app-upnp   <span class="c1">#通用即插即用UPnP(端口自动转发)</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Applications ---&gt; luci-app-argon-config <span class="c1">#Argon主题设置</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 常用主题类</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Themes ---&gt; luci-theme-argon
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 网络相关 (普通用户用不上）</span>
</span></span><span class="line"><span class="cl">Network ---&gt; IP Addresses and Names ---&gt; ddns-scripts_cloudflare.com-v4
</span></span><span class="line"><span class="cl">Network ---&gt; IP Addresses and Names ---&gt;  bind-dig
</span></span><span class="line"><span class="cl">Network ---&gt; Routing and Rediction ---&gt; ip-full
</span></span><span class="line"><span class="cl">Network ---&gt; File Transfer ---&gt; curl
</span></span><span class="line"><span class="cl">Network ---&gt; File Transfer ---&gt; wget-ssl
</span></span><span class="line"><span class="cl">Network ---&gt; iperf3
</span></span><span class="line"><span class="cl">Network ---&gt; ipset
</span></span><span class="line"><span class="cl">Network ---&gt; socat <span class="c1">#多功能的网络工具</span>
</span></span><span class="line"><span class="cl">Base system --&gt; dnsmasq-full <span class="c1">#DNS缓存和DHCP服务（dnsmasq-full和dnsmasq二者不可共存）</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 工具类 (普通用户用不上）</span>
</span></span><span class="line"><span class="cl">Utilities --&gt; acpid  <span class="c1">#电源管理接口（适用于x86平台）</span>
</span></span><span class="line"><span class="cl">Utilities --&gt; Editors --&gt; nano <span class="c1">#Nano 编辑器</span>
</span></span><span class="line"><span class="cl">Utilities --&gt; Shells --&gt; bash <span class="c1">#命令解释程序</span>
</span></span><span class="line"><span class="cl">Utilities --&gt; disc --&gt; eject <span class="c1">#弹出可移动介质</span>
</span></span><span class="line"><span class="cl">Utilities --&gt; disc --&gt; fdisk <span class="c1">#MBR分区工具</span>
</span></span><span class="line"><span class="cl">Utilities --&gt; disc --&gt; gdisk <span class="c1">#GBT分区工具</span>
</span></span><span class="line"><span class="cl">Utilities --&gt; disc --&gt; lsblk <span class="c1">#列出磁盘设备及分区查看工具</span>
</span></span><span class="line"><span class="cl">Utilities --&gt; Filesystem --&gt; resize2fs <span class="c1">#调整文件系统大小</span>
</span></span><span class="line"><span class="cl">Utilities --&gt; Filesystem --&gt; e2fsprogs <span class="c1">#Ext2（及Ext3/4）文件系统工具</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># IPv6（未来运营商可能不再提供 IPv4 公网地址，有远程访问需求的建议加入）</span>
</span></span><span class="line"><span class="cl">Extra packages ---&gt; ipv6helper （勾选此项即可，下面几项自动勾选）
</span></span><span class="line"><span class="cl">Network ---&gt; odhcp6c
</span></span><span class="line"><span class="cl">Network ---&gt; odhcpd-ipv6only
</span></span><span class="line"><span class="cl">LuCI ---&gt; Protocols ---&gt; luci-proto-ipv6
</span></span><span class="line"><span class="cl">LuCI ---&gt; Protocols ---&gt; luci-proto-ppp
</span></span></code></pre></div><h2 id="参考文献">参考文献</h2>
<p><a href="https://blog.x-wrt.com/docs/build/">https://blog.x-wrt.com/docs/build/</a></p>
<p><a href="https://www.moewah.com/archives/4003.html">https://www.moewah.com/archives/4003.html</a></p>
<p><a href="https://ghost.org/docs/install/ubuntu/">https://ghost.org/docs/install/ubuntu/</a></p>
<p><a href="https://github.com/skyformat99/eqos/blob/master/README_ZH.md">https://github.com/skyformat99/eqos/blob/master/README_ZH.md</a></p>
<p><a href="https://xiaohai.co/build-openwrt-firmware/">https://xiaohai.co/build-openwrt-firmware/</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>Windows11 安装 WLS2 Ubuntu 子系统</title>
      <link>https://weixiang.github.io/posts/install-wls2-ubuntu-subsystem-on-windows11/</link>
      <pubDate>Tue, 25 Apr 2023 13:13:45 +0800</pubDate>
      <guid>https://weixiang.github.io/posts/install-wls2-ubuntu-subsystem-on-windows11/</guid>
      <description>在 Windows11 上安装和配置 WLS2 Ubuntu 子系统，以 RedmiBook Pro 2022 锐龙版为例。</description>
      <content:encoded><![CDATA[<h2 id="开启虚拟化功能">开启虚拟化功能</h2>
<p>首先需要去 BIOS 开启虚拟化，各品牌电脑不一致。
RedmiBook Pro 2022 锐龙版 默认已经开启 AMD-V™，无需额外操作。</p>
<h2 id="安装-wls2">安装 WLS2</h2>
<p>在终端输入以下命令</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">wsl</span> <span class="p">-</span><span class="n">-install</span>
</span></span><span class="line"><span class="cl"><span class="n">dism</span><span class="p">.</span><span class="py">exe</span> <span class="p">/</span><span class="n">online</span> <span class="p">/</span><span class="nb">enable-feature</span> <span class="p">/</span><span class="n">featurename</span><span class="err">:</span><span class="nb">Microsoft-Windows</span><span class="n">-Subsystem-Linux</span> <span class="p">/</span><span class="n">all</span> <span class="p">/</span><span class="n">norestart</span>
</span></span><span class="line"><span class="cl"><span class="n">dism</span><span class="p">.</span><span class="py">exe</span> <span class="p">/</span><span class="n">online</span> <span class="p">/</span><span class="nb">enable-feature</span> <span class="p">/</span><span class="n">featurename</span><span class="err">:</span><span class="n">VirtualMachinePlatform</span> <span class="p">/</span><span class="n">all</span> <span class="p">/</span><span class="n">norestart</span>
</span></span><span class="line"><span class="cl"><span class="n">wsl</span> <span class="p">-</span><span class="n">-set-default-version</span> <span class="mf">2</span>
</span></span></code></pre></div><p>完成后重启电脑。</p>
<h2 id="安装-ubuntu">安装 Ubuntu</h2>
<p>打开 Microsoft Store，直接搜索 Ubuntu 安装即可。
传送门→ <a href="https://www.microsoft.com/store/productId/9PDXGNCFSCZV">https://www.microsoft.com/store/productId/9PDXGNCFSCZV</a></p>
<h2 id="配置">配置</h2>
<h3 id="安装-vscode-插件">安装 VSCode 插件</h3>
<p>打开 VSCode 会自动检测到 WLS2 环境，点击安装即可。</p>
<h3 id="配置中文语言包">配置中文语言包</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo apt install language-pack-zh-hans
</span></span><span class="line"><span class="cl">sudo dpkg-reconfigure locales
</span></span></code></pre></div><p>选择<code>en_US.UTF-8</code>和<code>zh_CN.UTF-8</code>，选择<code>zh_CN.UTF-8</code>为默认语言，重新打开终端生效。</p>
<h3 id="配置代理">配置代理</h3>
<p>查看宿主机 IP</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">cat /etc/resolv.conf <span class="p">|</span> grep nameserver <span class="p">|</span> awk <span class="s1">&#39;{ print $2 }&#39;</span>
</span></span></code></pre></div><p>设置代理</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">http_proxy</span><span class="o">=</span><span class="s1">&#39;http://&lt;Windows IP&gt;:&lt;Port&gt;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">https_proxy</span><span class="o">=</span><span class="s1">&#39;http://&lt;Windows IP&gt;:&lt;Port&gt;&#39;</span>
</span></span></code></pre></div><p>设置 git 代理</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">// 添加代理
</span></span><span class="line"><span class="cl">git config --global http.proxy <span class="s2">&#34;</span><span class="si">${</span><span class="nv">PROXY_HTTP</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">git config --global https.proxy <span class="s2">&#34;</span><span class="si">${</span><span class="nv">PROXY_HTTP</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">// 移除代理
</span></span><span class="line"><span class="cl">git config --global --unset http.proxy
</span></span><span class="line"><span class="cl">git config --global --unset https.proxy
</span></span></code></pre></div><h2 id="参考文献">参考文献</h2>
<p><a href="https://learn.microsoft.com/en-us/windows/wsl/install">https://learn.microsoft.com/en-us/windows/wsl/install</a>
<a href="https://zhuanlan.zhihu.com/p/466001838">https://zhuanlan.zhihu.com/p/466001838</a>
<a href="https://zinglix.xyz/2020/04/18/wsl2-proxy/">https://zinglix.xyz/2020/04/18/wsl2-proxy/</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>Docker 部署 MySQL 8.0</title>
      <link>https://weixiang.github.io/posts/deploy-mysql-8-0-using-docker/</link>
      <pubDate>Wed, 07 Dec 2022 05:42:29 +0800</pubDate>
      <guid>https://weixiang.github.io/posts/deploy-mysql-8-0-using-docker/</guid>
      <description>使用 Docker Compose 部署 MySQL 8.0 数据库服务器，数据持久化，以及配置远程访问权限。</description>
      <content:encoded><![CDATA[<h2 id="配置文件">配置文件</h2>
<p>将以下内容存为 <code>stack.yml</code>，此处为了不与本机已有的 MySQL 5.x 冲突，重新映射了端口。</p>
<p>需要提前建好 <code>/www/server/mysql8/mysql</code> 目录和 <code>my.cnf</code> 文件。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;3.1&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">db</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">mysql</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span>--<span class="l">default-authentication-plugin=mysql_native_password</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="l">always</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">MYSQL_ROOT_PASSWORD</span><span class="p">:</span><span class="w"> </span><span class="l">yourPassword</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s1">&#39;3307:3306&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s1">&#39;/www/server/mysql8/mysql:/var/lib/mysql&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s1">&#39;/www/server/mysql8/my.cnf:/etc/mysql/my.cnf&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s1">&#39;/etc/localtime:/etc/localtime:ro&#39;</span><span class="w">
</span></span></span></code></pre></div><p>启动容器</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f stack.yml up
</span></span></code></pre></div><h2 id="配置远程访问">配置远程访问</h2>
<p>MySQL 安装完成后只支持 localhost 访问，我们必须设置一下才可以远程访问，另外还有一些 MySQL 8.0 连接时的一些问题。（巨坑）</p>
<p>查看容器列表</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker container ls
</span></span></code></pre></div><p>进入容器</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker <span class="nb">exec</span> -it yourContainerId bash
</span></span></code></pre></div><p>登录到 MySQL</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mysql -u root -p
</span></span></code></pre></div><p>开始施法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="n">use</span><span class="w"> </span><span class="n">mysql</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">select</span><span class="w"> </span><span class="k">host</span><span class="p">,</span><span class="w"> </span><span class="k">user</span><span class="p">,</span><span class="w"> </span><span class="n">authentication_string</span><span class="p">,</span><span class="w"> </span><span class="n">plugin</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="k">user</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">#</span><span class="w"> </span><span class="err">查看表格中</span><span class="w"> </span><span class="n">root</span><span class="w"> </span><span class="err">用户的</span><span class="w"> </span><span class="k">host</span><span class="err">，默认应该显示的</span><span class="w"> </span><span class="n">localhost</span><span class="err">，只支持本地访问，不允许远程访问。</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">GRANT</span><span class="w"> </span><span class="k">ALL</span><span class="w"> </span><span class="k">ON</span><span class="w"> </span><span class="o">*</span><span class="p">.</span><span class="o">*</span><span class="w"> </span><span class="k">TO</span><span class="w"> </span><span class="s1">&#39;root&#39;</span><span class="o">@</span><span class="s1">&#39;%&#39;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">#</span><span class="w"> </span><span class="k">GRANT</span><span class="w"> </span><span class="k">ALL</span><span class="w"> </span><span class="k">ON</span><span class="w"> </span><span class="err">表示所有权限，</span><span class="o">%</span><span class="w"> </span><span class="err">表示通配所有</span><span class="w"> </span><span class="k">host</span><span class="err">，可以访问远程。</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ALTER</span><span class="w"> </span><span class="k">USER</span><span class="w"> </span><span class="s1">&#39;root&#39;</span><span class="o">@</span><span class="s1">&#39;%&#39;</span><span class="w"> </span><span class="n">IDENTIFIED</span><span class="w"> </span><span class="k">WITH</span><span class="w"> </span><span class="n">mysql_native_password</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="s1">&#39;yourPassword&#39;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">flush</span><span class="w"> </span><span class="k">privileges</span><span class="p">;</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">#</span><span class="w"> </span><span class="err">刷新权限</span><span class="w">
</span></span></span></code></pre></div><h2 id="测试连接">测试连接</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mysql -h 127.0.0.1 -P <span class="m">3307</span> -u root -p
</span></span></code></pre></div><h2 id="参考文献">参考文献</h2>
<p><a href="https://hub.docker.com/_/mysql">https://hub.docker.com/_/mysql</a></p>
<p><a href="http://netsite.win/2018/06/13/mysql/mysql8%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7%E5%8F%8A%E6%8E%88%E6%9D%83-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5-%E5%9D%91/">http://netsite.win/2018/06/13/mysql/mysql8%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7%E5%8F%8A%E6%8E%88%E6%9D%83-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5-%E5%9D%91/</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>自己动手编译 DSM7 引导</title>
      <link>https://weixiang.github.io/posts/compile-your-own-dsm7-boot/</link>
      <pubDate>Fri, 12 Aug 2022 08:45:41 +0800</pubDate>
      <guid>https://weixiang.github.io/posts/compile-your-own-dsm7-boot/</guid>
      <description>使用 tinycore-redpill 自己动手编译黑群晖 Synology DSM7 的引导镜像，以华擎 J3455 为例。</description>
      <content:encoded><![CDATA[<h2 id="引子">引子</h2>
<p>假期给家里组了一台 NAS，万由 401 机箱 + 华擎 J3455。</p>
<p>没想到过程比预想中要曲折许多，买了才知道，华擎 J3455 是著名的“妖板”。</p>
<p>安装各种出错，启动时间巨长（至少十分钟），网速飘忽不定，还有 DSM 中各种奇奇怪怪的 Bug……</p>
<p>总之，敢碰华擎 J3455 的都是勇士。</p>
<p>听说是驱动问题造成的，自己编译引导可以一定程度上缓解这些问题。</p>
<p>于是就有了下面的笔记。</p>
<blockquote>
<p>事实证明确实靠谱，比用通用引导稳定了不少，目前已经平稳运行两周有余。感谢 pocopico 和 llm-y2k 两位开发者。</p></blockquote>
<h2 id="制作-tinycore-redpill-启动盘">制作 tinycore-redpill 启动盘</h2>
<p>前往项目：<a href="https://github.com/llm-y2k/tinycore-redpill">https://github.com/llm-y2k/tinycore-redpill</a>
这里采用了 llm-y2k 修改的换源版镜像：</p>
<blockquote>
<p>pocopico 发布的<a href="https://github.com/pocopico/tinycore-redpill">Tinycore-redpill</a>实现编译 DSM7 引导的自动化，省去繁琐的手工操作部分，造福了广大玩家。但由于众所周知的原因，</p></blockquote>
<p>Tinycore-redpill 在国内网络基本无法使用，U 盘引导 NAS 实体机编译时几乎无法完成，遂修改部分代码以适应国内网络环境，目前已可正常使用。</p>
<p>下载镜像文件，根据设备情况选择不同的引导镜像，我这里选用了<code>[tinycore-redpill-uefi.v0.8.0.0.img.gz](https://github.com/llm-y2k/tinycore-redpill/blob/cn/tinycore-redpill-uefi.v0.8.0.0.img.gz)</code>。</p>
<p>使用任意引导盘制作工具，如 Rufus，烧录进 U 盘即可。</p>
<h2 id="启动-tinycore-redpill">启动 tinycore-redpill</h2>
<p>将烧写完成的 U 盘插入目标设备，选择从 U 盘启动即可进入系统，点击下图图标进入终端。</p>
<p><img loading="lazy" src="https://s1.ax1x.com/2022/03/19/qAIK9e.md.jpg"></p>
<p>使用<code>ifconfig</code>命令查看设备 IP 地址</p>
<p><img loading="lazy" src="https://s1.ax1x.com/2022/03/19/qAIM1H.jpg"></p>
<p>使用任意 SSH 工具连接到上面的 IP，账号为<code>tc</code>，密码为<code>P@ssw0rd</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ssh tc@192.168.0.243
</span></span></code></pre></div><p><img loading="lazy" src="https://s1.ax1x.com/2022/03/19/qAI3nI.jpg"></p>
<h2 id="更新脚本">更新脚本</h2>
<p>首先更新脚本</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo curl https://raw.0z.gs/llm-y2k/tinycore-redpill/main/rploader-cn.sh<span class="p">|</span>bash -s fullupgrade
</span></span></code></pre></div><p>授予执行权限</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo chmod <span class="m">777</span> *.sh
</span></span></code></pre></div><h2 id="生成配置">生成配置</h2>
<p>输入如下命令开始配置编译文件</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo ./rploader-cn.sh serialgen DS918+ now
</span></span><span class="line"><span class="cl">或者
</span></span><span class="line"><span class="cl">sudo ./rploader-cn.sh serialgen DS3615xs now
</span></span><span class="line"><span class="cl">这里设置nas机型，推荐选择918和3615两种中的一种
</span></span></code></pre></div><p><img loading="lazy" src="https://s1.ax1x.com/2022/03/19/qAIGHP.jpg"></p>
<p>配置盘序文件</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo ./rploader-cn.sh satamap now
</span></span></code></pre></div><p><img loading="lazy" src="https://s1.ax1x.com/2022/03/19/qAIYAf.jpg"></p>
<p>生成 U 盘 VID、PID 信息</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo ./rploader-cn.sh identifyusb now
</span></span></code></pre></div><p><img loading="lazy" src="https://s1.ax1x.com/2022/03/19/qAItN8.jpg"></p>
<h2 id="开始编译">开始编译</h2>
<p>配置完成后，正式开始编译，根据机器和网络速度，耗时可能会比较长，耐心等待即可。
建议上游做好代理设置，跑起来会比较顺利。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 根据前面所选机型输入编译命令</span>
</span></span><span class="line"><span class="cl">918：
</span></span><span class="line"><span class="cl">sudo ./rploader-cn.sh build apollolake-7.0.1-42218
</span></span><span class="line"><span class="cl">3615：
</span></span><span class="line"><span class="cl">sudo ./rploader-cn.sh build bromolow-7.0.1-42218
</span></span></code></pre></div><p><img loading="lazy" src="https://s1.ax1x.com/2022/03/19/qAIN4S.jpg"></p>
<p>curl 35 错误不妨休息一下，过会再试，curl 60 错误不妨检查下 Nas 机器本地时间是否正确。
由于网络原因，可能个别驱动下载失败，别慌，重新再次编译即可。</p>
<p><img loading="lazy" src="https://s1.ax1x.com/2022/03/19/qAId3Q.jpg"></p>
<p>编译成功！切换到 winscp 去下载生成的文件</p>
<p><img loading="lazy" src="https://s1.ax1x.com/2022/03/19/qAIa9g.jpg"></p>
<h2 id="备份引导">备份引导</h2>
<p>下载引导镜像文件，做好备份有备无患，此引导镜像相当于为此设备定制。</p>
<p><img loading="lazy" src="https://s1.ax1x.com/2022/03/19/qAI0js.md.jpg"></p>
<p>最后回到 putty，正式存盘，一定要存盘！一定要存盘！一定要存盘！</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo filetool.sh -b
</span></span></code></pre></div><p><img loading="lazy" src="https://s1.ax1x.com/2022/03/19/qAIDun.jpg"></p>
<p>最后重启设备</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo reboot
</span></span></code></pre></div><p><img loading="lazy" src="https://s1.ax1x.com/2022/03/19/qAIrBq.jpg"></p>
<p>理论上会自动引导进入 DSM 的安装界面，如果没有，可以将上面备份的镜像写入 U 盘，再进行引导。接下来就是常规的 DSM 安装流程了。</p>
<h2 id="参考文献">参考文献</h2>
<p><a href="https://www.openos.org/threads/0-8-0-3dsm7tinycore-redpill.4050/">https://www.openos.org/threads/0-8-0-3dsm7tinycore-redpill.4050/</a></p>
<p><a href="https://github.com/llm-y2k/tinycore-redpill">https://github.com/llm-y2k/tinycore-redpill</a></p>
<p><a href="https://github.com/pocopico/tinycore-redpill">https://github.com/pocopico/tinycore-redpill</a></p>
<h2 id="版权声明">版权声明</h2>
<p><img alt="知识共享许可协议" loading="lazy" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png">
本文由 <a href="https://weixiang.github.io">Jacob</a> 采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0">知识共享署名 - 非商业性使用 - 相同方式共享 4.0 国际许可协议</a> 进行许可，发布于 <a href="https://weixiang.github.io">weixiang.github.io</a> 。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Flarum 站点服务器迁移笔记</title>
      <link>https://weixiang.github.io/posts/flarum-web-server-migration-notes/</link>
      <pubDate>Mon, 08 Aug 2022 05:55:00 +0800</pubDate>
      <guid>https://weixiang.github.io/posts/flarum-web-server-migration-notes/</guid>
      <description>记录一次使用宝塔面板进行 Flarum 论坛网站服务器迁移的过程。</description>
      <content:encoded><![CDATA[<h2 id="备份原站点">备份原站点</h2>
<p>将网站目录及数据库打包，妥善保管。</p>
<h2 id="部署新站点">部署新站点</h2>
<p>在新服务器进行 Flarum 站点的全新部署，具体可参考
<a href="https://discuss.flarum.org.cn/d/2195">https://discuss.flarum.org.cn/d/2195</a></p>
<p>无需配置新站点，站点可以正常打开就行，到下图这一步即可，不用填写信息，稍后会直接从配置文件进行恢复。</p>
<p><img loading="lazy" src="https://s1.ax1x.com/2020/10/15/0THoQI.png"></p>
<h2 id="恢复备份">恢复备份</h2>
<ol>
<li>将站点及数据库备份上传到新服务器，解压到一个新文件夹，不要覆盖直接新站点。</li>
<li>恢复数据库，保持数据库名称和密码与原站点一致。</li>
<li>将原来的 <code>public</code> 文件夹，<code>vender</code> 文件夹，<code>composer.json</code> 文件，<code>composer.lock</code> 文件，<code>config.php</code> 文件覆盖至新部署的 Flarum 根目录。</li>
<li>刷新网页，享受新站点。</li>
</ol>
<h2 id="参考文献">参考文献</h2>
<p><a href="https://www.wapriaily.com/flarum-pagoda-perfect-migration-tutorial/">https://www.wapriaily.com/flarum-pagoda-perfect-migration-tutorial/</a>
<a href="https://discuss.flarum.org.cn/d/2195">https://discuss.flarum.org.cn/d/2195</a></p>
<h2 id="版权声明">版权声明</h2>
<p><img alt="知识共享许可协议" loading="lazy" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png">
本文由 <a href="https://weixiang.github.io">Jacob</a> 采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0">知识共享署名 - 非商业性使用 - 相同方式共享 4.0 国际许可协议</a> 进行许可，首发于 <a href="https://weixiang.github.io">weixiang.github.io</a> 。</p>
]]></content:encoded>
    </item>
    <item>
      <title>哪吒监控探针部署</title>
      <link>https://weixiang.github.io/posts/nezha-monitoring-deployment/</link>
      <pubDate>Tue, 19 Jul 2022 16:18:31 +0800</pubDate>
      <guid>https://weixiang.github.io/posts/nezha-monitoring-deployment/</guid>
      <description>哪吒监控是一款轻量化的服务器监控和运维工具，提供实时性能监控与告警通知。作为开源项目，它支持企业自托管，保护数据隐私，并支持多语言。</description>
      <content:encoded><![CDATA[<h2 id="准备工作">准备工作</h2>
<p>获取 Github/Jihulab 的 Client ID 和密钥：</p>
<p>哪吒监控接入 Github、Gitlab、Jihulab、Gitee 作为后台管理员账号</p>
<ul>
<li>
<p>首先我们需要新建一个验证应用，以 Github 为例，登录 Github 后，打开 <a href="https://github.com/settings/developers">https://github.com/settings/developers</a> ，依次选择“OAuth Apps” - “New OAuth App”</p>
<p><code>Application name</code> - 随意填写</p>
<p><code>Homepage URL</code> - 填写面板的访问域名，如：&quot;<a href="http://cdn.example.com/">http://cdn.example.com</a>&quot;</p>
<p><code>Authorization callback URL</code> - 填写回调地址，如：&quot;<a href="http://cdn.example.com/oauth2/callback">http://cdn.example.com/oauth2/callback</a>&quot;</p>
</li>
<li>
<p>点击“Register application”</p>
</li>
<li>
<p>保存页面中的 Client ID，然后点击“Generate a new client secret“，创建一个新的 Client Secret，新建的密钥仅会显示一次，请妥善保存</p>
</li>
<li>
<p>JihuLab 的应用创建入口为：<a href="https://jihulab.com/-/profile/applications">https://jihulab.com/-/profile/applications</a></p>
</li>
<li>
<p><code>Redirect URL</code> 中应填入回调地址</p>
</li>
<li>
<p>在下方<code>范围</code>中勾选 <code>read_user</code> 和 <code>read_api</code></p>
</li>
<li>
<p>创建完成后，保存好应用程序 ID 和密码</p>
</li>
</ul>
<h2 id="安装面板">安装面板</h2>
<ul>
<li>在面板服务器中，运行安装脚本：</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">curl -L https://raw.githubusercontent.com/naiba/nezha/master/script/install.sh  -o nezha.sh <span class="o">&amp;&amp;</span> chmod +x nezha.sh <span class="o">&amp;&amp;</span> sudo ./nezha.sh
</span></span></code></pre></div><p>如果你的面板服务器位于中国大陆，可以使用镜像：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">curl -L https://jihulab.com/nezha/nezha/-/raw/master/script/install.sh -o nezha.sh <span class="o">&amp;&amp;</span> chmod +x nezha.sh <span class="o">&amp;&amp;</span> sudo <span class="nv">CN</span><span class="o">=</span><span class="nb">true</span> ./nezha.sh
</span></span></code></pre></div><ul>
<li>等待 Docker 安装完毕后，分别输入以下值：</li>
</ul>
<p><code>OAuth提供商</code> - Github，Gitlab，Jihulab，Gitee 中选择一个</p>
<p><code>Client ID</code> - 之前保存的 Client ID</p>
<p><code>Client Secret</code> - 之前保存的密钥</p>
<p><code>用户名</code> - OAuth 提供商中的用户名</p>
<p><code>站点标题</code> - 自定义站点标题</p>
<p><code>访问端口</code> - 公开访问端口，可自定义，默认 8008</p>
<p><code>Agent的通信端口</code> - Agent 与 Dashboard 的通信端口，默认 5555</p>
<ul>
<li>输入完成后，等待拉取镜像</li>
</ul>
<p>安装结束后，如果一切正常，此时你可以访问域名 + 端口号，如“<a href="http://cdn.example.com:8008/">http://cdn.example.com:8008</a>”来查看面板</p>
<h2 id="配置反代">配置反代</h2>
<ul>
<li>在宝塔面板中新建一个站点，域名填写公开访问域名，如“<a href="http://cdn.example.com/">http://cdn.example.com</a>“ ，然后点击“设置”进入站点设置选项，选择“反向代理” - “新建反向代理”</li>
<li>自定义一个代理名称，在下方“目标 URL”中填入 <code>http://127.0.0.1</code> 然后点击“保存”</li>
<li>打开刚刚新建的反向代理右边的“配置文件”，将配置文件替换为以下内容：</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nginx" data-lang="nginx"><span class="line"><span class="cl"><span class="c1">#PROXY-START/
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">location</span> <span class="s">/</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kn">proxy_pass</span> <span class="s">http://127.0.0.1:8008</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">proxy_set_header</span> <span class="s">Host</span> <span class="nv">$http_host</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">proxy_set_header</span>      <span class="s">Upgrade</span> <span class="nv">$http_upgrade</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="k">location</span> <span class="p">~</span> <span class="sr">^/(ws|terminal/.+)$</span>  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kn">proxy_pass</span> <span class="s">http://127.0.0.1:8008</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">proxy_http_version</span> <span class="mi">1</span><span class="s">.1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">proxy_set_header</span> <span class="s">Upgrade</span> <span class="nv">$http_upgrade</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">proxy_set_header</span> <span class="s">Connection</span> <span class="s">&#34;Upgrade&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">proxy_set_header</span> <span class="s">Host</span> <span class="nv">$http_host</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">#PROXY-END/
</span></span></span></code></pre></div><ul>
<li>点击“保存”</li>
</ul>
<p>现在，你应该可以直接使用域名，如：“<a href="http://cdn.example.com/">http://cdn.example.com</a>“来访问面板了</p>
<h2 id="自定义页面">自定义页面</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">ua</span> <span class="o">=</span> <span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">ua</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/MicroMessenger/i</span><span class="p">)</span> <span class="o">==</span> <span class="s2">&#34;micromessenger&#34;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">alert</span><span class="p">(</span><span class="s2">&#34;请勿使用微信打开);
</span></span></span><span class="line"><span class="cl"><span class="s2">        var opened = window.open(&#34;</span><span class="nx">about</span><span class="o">:</span><span class="nx">blank</span><span class="s2">&#34;, &#34;</span><span class="nx">_self</span><span class="err">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nx">opened</span><span class="p">.</span><span class="nx">opener</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">opened</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">style</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="nc">right</span><span class="p">.</span><span class="nc">menu</span><span class="o">&gt;</span><span class="nt">a</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">visibility</span><span class="p">:</span> <span class="kc">hidden</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="nc">footer</span> <span class="p">.</span><span class="nc">is-size-7</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">visibility</span><span class="p">:</span> <span class="kc">hidden</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="nc">item</span> <span class="nt">img</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">visibility</span><span class="p">:</span> <span class="kc">hidden</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nb">window</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">var</span> <span class="nx">avatar</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s2">&#34;.item img&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="kd">var</span> <span class="nx">footer</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s2">&#34;div.is-size-7&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nx">footer</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s2">&#34;Powered by Nezha&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">footer</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">visibility</span> <span class="o">=</span> <span class="s2">&#34;visible&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">avatar</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s2">&#34;https://raw.githubusercontent.com/naiba/nezha/master/resource/static/brand.svg&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">avatar</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">visibility</span> <span class="o">=</span> <span class="s2">&#34;visible&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">async</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://www.googletagmanager.com/gtag/js?id=UA-**********&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">window</span><span class="p">.</span><span class="nx">dataLayer</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">dataLayer</span> <span class="o">||</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">  <span class="kd">function</span> <span class="nx">gtag</span><span class="p">(){</span><span class="nx">dataLayer</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);}</span>
</span></span><span class="line"><span class="cl">  <span class="nx">gtag</span><span class="p">(</span><span class="s1">&#39;js&#39;</span><span class="p">,</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">gtag</span><span class="p">(</span><span class="s1">&#39;config&#39;</span><span class="p">,</span> <span class="s1">&#39;UA-**********&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span><span class="nb">window</span><span class="p">.</span><span class="nx">$crisp</span><span class="o">=</span><span class="p">[];</span><span class="nb">window</span><span class="p">.</span><span class="nx">CRISP_WEBSITE_ID</span><span class="o">=</span><span class="s2">&#34;103e95b6-3b0c-4f8a-9185-349951c14825&#34;</span><span class="p">;(</span><span class="kd">function</span><span class="p">(){</span><span class="nx">d</span><span class="o">=</span><span class="nb">document</span><span class="p">;</span><span class="nx">s</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&#34;script&#34;</span><span class="p">);</span><span class="nx">s</span><span class="p">.</span><span class="nx">src</span><span class="o">=</span><span class="s2">&#34;https://client.crisp.chat/l.js&#34;</span><span class="p">;</span><span class="nx">s</span><span class="p">.</span><span class="kr">async</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s2">&#34;head&#34;</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">s</span><span class="p">);})();&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><h2 id="参考文献">参考文献</h2>
<p><a href="https://nezha.wiki/">https://nezha.wiki/</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>在 CentOS 7 使用宝塔面板安装 Ghost 博客</title>
      <link>https://weixiang.github.io/posts/install-ghost-blog-with-aapanel-on-centos-7/</link>
      <pubDate>Tue, 11 Jan 2022 06:31:08 +0800</pubDate>
      <guid>https://weixiang.github.io/posts/install-ghost-blog-with-aapanel-on-centos-7/</guid>
      <description>Ghost 官方只提供一个错漏百出的 Ubuntu 安装教程，那么如何在 CentOS 上安装呢？</description>
      <content:encoded><![CDATA[<p>对于新版本的 Ghost 安装，可谓是全网谜语人，经过一上午的努力，终于在一堆垃圾站中，摸索出了可用的安装方法。</p>
<h2 id="创建用户">创建用户</h2>
<p>使用 root 新建用户<code>&lt;user&gt;</code>为用户名，<code>-m</code>为创建用户主目录</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">useradd &lt;user&gt; -m
</span></span><span class="line"><span class="cl">passwd &lt;user&gt;
</span></span></code></pre></div><p>输入<code>&lt;user&gt;</code>的密码，输入时不显示</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">visudo
</span></span></code></pre></div><p>找到，在下面加入新行，参照上一行的格式</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1">## Allow root to run any commands anywhere</span>
</span></span><span class="line"><span class="cl">root    <span class="nv">ALL</span><span class="o">=(</span>ALL<span class="o">)</span>       ALL
</span></span><span class="line"><span class="cl">&lt;user&gt;  <span class="nv">ALL</span><span class="o">=(</span>ALL<span class="o">)</span>       ALL
</span></span></code></pre></div><h2 id="安装-nodejs">安装 Node.JS</h2>
<p>下载并执行脚本</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo yum -y install curl
</span></span><span class="line"><span class="cl">curl -sL https://rpm.nodesource.com/setup_14.x <span class="p">|</span> sudo bash -
</span></span></code></pre></div><p>安装 Node.js 14.x 和 npm</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo yum install -y nodejs
</span></span></code></pre></div><p>使用<code>node -v</code>查看安装是否成功</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ node -v
</span></span><span class="line"><span class="cl">v14.0.0
</span></span></code></pre></div><p>安装 Yarn 包管理器（可选）</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -sL https://dl.yarnpkg.com/rpm/yarn.repo <span class="p">|</span> sudo tee /etc/yum.repos.d/yarn.repo
</span></span><span class="line"><span class="cl">sudo yum install yarn
</span></span></code></pre></div><h2 id="安装-ghost-cli">安装 Ghost-CLI</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo npm install ghost-cli@latest -g
</span></span></code></pre></div><h2 id="创建网站">创建网站</h2>
<p>在宝塔面板中创建一个静态网站，创建数据库，然后删除目录下<strong>所有</strong>文件。</p>
<h3 id="更改目录权限">更改目录权限</h3>
<p>更改所有者为新建的<code>&lt;user&gt;</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo chown -R &lt;user&gt;:&lt;user&gt; /www/wwwroot/sitename.com/
</span></span></code></pre></div><p>赋予 775 权限</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo chmod -R <span class="m">775</span> /www/wwwroot/sitename.com/
</span></span></code></pre></div><h2 id="安装-ghost">安装 Ghost</h2>
<p>定位到网站目录后，执行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ghost install
</span></span></code></pre></div><p>按照提示填入信息即可。</p>
<h2 id="启动-ghost">启动 Ghost</h2>
<p>CentOS 环境下 Ghost 启动会报错，需要用以下命令启动。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo systemctl start ghost_yoursite-com
</span></span></code></pre></div><h2 id="设置-nginx-反向代理">设置 Nginx 反向代理</h2>
<p>在宝塔面板中设置反向代理，编辑配置添加<code>proxy_set_header X-Forwarded-Proto $scheme;</code></p>
<h2 id="故障排查">故障排查</h2>
<p>测试运行：<code>ghost run</code>
查看状态：<code>ghost status</code>
运行列表：<code>ghost ls</code>
修改配置：<code>ghost setup</code>
查看日志：<code>ghost log</code></p>
<h2 id="参考资料">参考资料</h2>
<p><a href="https://ghost.org/docs/install/ubuntu/">https://ghost.org/docs/install/ubuntu/</a>
<a href="https://computingforgeeks.com/install-node-js-14-on-centos-rhel-linux/">https://computingforgeeks.com/install-node-js-14-on-centos-rhel-linux/</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>用 Pi-hole 搭建一个树莓派黑洞</title>
      <link>https://weixiang.github.io/posts/use-pi-hole-to-build-a-raspberry-pi-black-hole/</link>
      <pubDate>Mon, 12 Apr 2021 05:19:00 +0800</pubDate>
      <guid>https://weixiang.github.io/posts/use-pi-hole-to-build-a-raspberry-pi-black-hole/</guid>
      <description>通过您自己的 Linux 硬件进行广告拦截！Pi- hole®是一个 DNS 沉洞服务器，无需安装任何客户端软件即可保护您的设备免受有害内容的侵害。</description>
      <content:encoded><![CDATA[<blockquote>
<p><strong>通过您自己的 Linux 硬件进行广告拦截</strong></p></blockquote>
<p>Pi- <a href="https://pi-hole.net/trademark-rules-and-brand-guidelines/">hole®</a>是一个<a href="https://en.wikipedia.org/wiki/DNS_Sinkhole">DNS 沉洞服务器</a>，无需安装任何客户端软件即可保护您的设备免受有害内容的<a href="https://en.wikipedia.org/wiki/DNS_Sinkhole">侵害</a>。</p>
<ul>
<li><strong>易于安装</strong>：安装程序将引导您完成整个过程，并且<a href="https://www.youtube.com/watch?v=vKWjx1AQYgs">只需不到十分钟的时间</a></li>
<li><strong>强大</strong>：不仅是网页去广告，还能去除 APP 内置广告和智能电视广告</li>
<li><strong>响应式</strong>：通过缓存 DNS 查询来无缝地加快日常网络加载的速度</li>
<li><strong>轻巧</strong>：运行平稳，<a href="https://discourse.pi-hole.net/t/hardware-software-requirements/273">对硬件的性能要求很小</a></li>
<li><strong>全能</strong>：拥有一个命令行界面，有稳定操作性的保证</li>
<li><strong>优雅的 UI</strong>：一个漂亮的响应式 Web 界面仪表板，可查看和控制您的 Pi-hole</li>
<li><strong>多功能</strong>：可以选择用作<a href="https://discourse.pi-hole.net/t/how-do-i-use-pi-holes-built-in-dhcp-server-and-why-would-i-want-to/3026">DHCP 服务器</a>，自动保护局域网内的<em>所有</em>设备</li>
<li><strong>可扩展性</strong>：安装在服务器级硬件上时<a href="https://pi-hole.net/2017/05/24/how-much-traffic-can-pi-hole-handle/">能够处理数亿个查询</a></li>
<li><strong>现代</strong>：能够阻止 IPv4 和 IPv6 上的广告</li>
<li><strong>免费</strong>：开源软件，你的隐私只在你的手里</li>
</ul>
<h2 id="需要准备的材料">需要准备的材料</h2>
<ul>
<li>一个树莓派（以 3B+ 为例）</li>
<li>USB 电源适配器（5V，不小于 2A）</li>
<li>USB 电缆</li>
<li>8G 以上的高速 TF 卡</li>
<li>电脑（以 Windows 为例）</li>
<li>网线</li>
<li>互联网连接（推荐使用 真 · 互联网）</li>
</ul>
<h2 id="开始安装">开始安装</h2>
<p>首先我们需要将树莓派接入路由器，有线或无线均可，然后 SSH 远程登录到树莓派上：</p>
<p>不会的同学请先去看上一篇文章，本文不再赘述如何初始化、连接到树莓派。</p>
<p>使用官方的一键安装脚本即可快速安装（我额外加了以 root 运行）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -sSL https://install.pi-hole.net <span class="p">|</span> sudo bash
</span></span></code></pre></div><p>等待一会，然后一路回车即可，个人认为默认的设置就很不错了。如果你想搞特殊，也可以停下来用 Google 翻译看看，根据自己想需要调整设置。</p>
<p><strong>因为众所周知的原因，安装过程可能需要魔法！</strong></p>
<p>如果你和我一样在这里卡了很久或者直接 error 了，说明你需要使用魔法。</p>
<p>至于具体操作请自己 Google 一下吧，我这里也不太好直接向麻瓜们直接展示对吧。（搜索关键词：树莓派 + 魔法名称）</p>
<p><img loading="lazy" src="https://jacob-1256058189.cos.ap-guangzhou.myqcloud.com/ghost/content/images/2021/07/ce442dcfb36d6358.webp"></p>
<p>安装完毕，记下访问地址和密码。</p>
<p><img loading="lazy" src="https://jacob-1256058189.cos.ap-guangzhou.myqcloud.com/ghost/content/images/2021/07/31a7b37aea789e4a.webp"></p>
<h2 id="调整-pi-hole-的设置">调整 Pi-hole 的设置</h2>
<p>用浏览器访问刚刚的地址就能看到主页了，或者也可以访问 <a href="http://pi.hole/admin">http://pi.hole/admin</a></p>
<p>主页展示的是 Pi-hole 的实时运行状态，点击 Login 输入记下的密码即可登录到控制台。</p>
<p><img loading="lazy" src="https://jacob-1256058189.cos.ap-guangzhou.myqcloud.com/ghost/content/images/2021/07/4d988d18bf797756.webp"></p>
<p>控制台就是这样的，现在可以开始调整 Pi-hole 的设置来获得更好的体验了：</p>
<p><img loading="lazy" src="https://jacob-1256058189.cos.ap-guangzhou.myqcloud.com/ghost/content/images/2021/07/bd03f70004631eaa.webp"></p>
<h3 id="添加-hosts-源">添加 hosts 源</h3>
<p>实际上，Pi-hole 使用的是 hosts 方式对广告进行过滤（类似 AdAway），所以 hosts 源的好坏直接决定了用户体验。自带的 host 对于我国网络环境来说可能会水土不服，下面推荐几个知名 hosts 源，可以到  Settings - Blocklists 里面添加自定义源，添加一个之后按 Save 保存，全部添加完成后按 Save and Update 来更新 host 并保存设置。</p>
<p><img loading="lazy" src="https://jacob-1256058189.cos.ap-guangzhou.myqcloud.com/ghost/content/images/2021/07/1d8f1ef3b816cab6.webp"></p>
<ul>
<li><a href="https://github.com/vokins/yhosts">yhosts</a>：可以说是国内比较老牌的知名 hosts，定期有更新，但作者主观屏蔽了一些非广告网站，可以用下面的命令手动添加白名单来解决不够客观的问题：</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pihole -w <span class="sb">`</span>curl -sSL https://raw.githubusercontent.com/vokins/yhosts/master/data/moot/cps.txt https://raw.githubusercontent.com/vokins/yhosts/master/data/moot/error.txt https://raw.githubusercontent.com/vokins/yhosts/master/data/moot/hate.txt <span class="p">|</span> sed <span class="s1">&#39;/^@/d; /^#/d; s/127.0.0.1 //&#39;</span> <span class="p">|</span> tr <span class="s2">&#34;\n&#34;</span> <span class="s2">&#34; &#34;</span><span class="sb">`</span>
</span></span></code></pre></div><ul>
<li><a href="https://github.com/neko-dev/neohosts">neoHosts</a>：比较小众的 hosts，但也口碑不错，看介绍貌似是不满于上面那位而弄出来的。</li>
<li><a href="https://adaway.org/">AdAway</a>、<a href="https://pgl.yoyo.org/adservers">Yoyos</a>、<a href="http://winhelp2002.mvps.org/">MVPS</a>：知名去广告软件 AdAway 的默认源，有些水土不服。</li>
<li><a href="https://github.com/jdlingyu/ad-wars">大圣净化</a>：Android 平台知名去广告软件大圣净化的规则，针对视频网站优化。</li>
<li><a href="https://github.com/googlehosts/hosts">GoogleHosts</a>：一个能帮助你访问 404 网站的 hosts。</li>
</ul>
<p>更多 hosts 可以去 GitHub 上搜索，或者到 AdAway 的 Wiki 看看：<a href="https://github.com/AdAway/AdAway/wiki/HostsSources">https://github.com/AdAway/AdAway/wiki/HostsSources</a></p>
<p>相较于通常的过滤方式（如 Adblock Plus、KoolProxy 等），利用 hosts 过滤有自己的优缺点。优点是不会拖累网速（甚至可能有一定提升），缺点是过滤效果不尽如人意。</p>
<h3 id="添加国内-dns-服务器">添加国内 DNS 服务器</h3>
<p>Pi-hole 在安装时已经设置过一次 DNS 服务器了，但因为是国外的 DNS 服务，速度可能会比较慢，通过添加国内的 DNS 服务可以提高速度。</p>
<p>进入 Settings - DNS - Upstream DNS Servers 就可以添加 DNS 服务器了。</p>
<p><img loading="lazy" src="https://jacob-1256058189.cos.ap-guangzhou.myqcloud.com/ghost/content/images/2021/07/602215aea76932ad.webp"></p>
<h4 id="国内常见公共-dns-服务">国内常见公共 DNS 服务</h4>
<h5 id="腾讯-dnspod">腾讯 DNSPod</h5>
<p><a href="https://www.dnspod.cn/Products/Public.DNS">https://www.dnspod.cn/Products/Public.DNS</a></p>
<p>Anycast：上海、天津、广州、香港</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">IPv4：119.29.29.29 / 119.28.28.28
</span></span></code></pre></div><blockquote>
<p>这是 DNSPod 建立的公共 DNS，之后 DNSPod 被腾讯收购以后由腾讯云负责运营。腾讯 DNSPod 公共 DNS 配置了 Anycast，节点囊括了腾讯云所有可用区的节点（包括海外），所以速度还是不错的，并且除了支持 ECS 以外还有一些关于 DNS 出口选择优化的加成，所以 CDN 解析结果相对准确很多。但是 SLA 却并不优秀 —— <del>曾经</del> 经常遭遇 DDoS 攻击导致无法解析。除此以外，由于相对出名、使用人数较多，是运营商重点劫持的对象。</p>
<p>值得一提的是，DNSPod 的公共 DNS 是免费提供 HTTPDNS 的，Demo 可以看 <a href="https://www.dnspod.cn/httpdns/demo">这里</a></p></blockquote>
<h5 id="阿里云公共-dns">阿里云公共 DNS</h5>
<p><a href="http://www.alidns.com">http://www.alidns.com</a></p>
<p>Anycast：成都、深圳、杭州</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">IPv4：223.5.5.5 / 223.6.6.6
</span></span><span class="line"><span class="cl">IPv6：2400:3200::1 / 2400:3200:baba::1
</span></span></code></pre></div><blockquote>
<p>阿里建立的公共 DNS。和腾讯一样，阿里公共 DNS 也是搭建在自家的云服务 —— 阿里云上。虽然也配置了 Anycast，不过不包括海外节点，<del>国内也就浙江阿里云和深圳阿里云两个节点，</del> 而且华北地区都是隧道穿透回深圳，响应速度略逊于 DNSPod 提供的公共 DNS；阿里公共 DNS 不支持 ECS，有 DNS 出口的优化 <del>（一般都是广东出口）</del>，。关于阿里的公共 DNS 没有听说太多宕机、无法使用相关的报告。<del>，但是倒是听说阿里公共 DNS 时常有返回 <code>NXDOMAIN</code> 影响使用体验。</del> <code>NSDOMAIN</code> 问题已得到一定缓解。阿里云 DNS 是国内首个支持 IPv6 的 DNS 服务。</p></blockquote>
<h5 id="南京信风公共-dns">南京信风公共 DNS</h5>
<p><a href="https://www.114dns.com/">https://www.114dns.com/</a></p>
<p>Anycast：南京、济南、芝加哥</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">IPv4：114.114.114.114 / 114.114.115.115
</span></span></code></pre></div><blockquote>
<p>无疑是国内最著名的公共 DNS，但是显然不是最好的。有 Anycast，国内有南京和<del>青岛</del>济南两个节点、海外有芝加哥节点，响应速度不敢恭维。国内最著名的公共 DNS、使用的人很多，SLA 非常可靠，因此也是运营商重点劫持的对象。但是考虑到南京信风为运营商旁路广告劫持提供技术和硬件支持，对他们提供的公共 DNS 服务还是戴着有色眼镜来看吧。</p></blockquote>
<h5 id="cnnic-公共-dns">CNNIC 公共 DNS</h5>
<p><a href="http://www.sdns.cn/">http://www.sdns.cn/</a>
北京、杭州、香港</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">IPv4：1.2.4.8 / 210.2.4.8
</span></span></code></pre></div><blockquote>
<p>CNNIC 名声并不好（CNNIC Root CA 的故事），因此有些许人相对都有些对 CNNIC 的抵触心理。CNNIC 的公共 DNS（SDNS）国内仅双点部署、Anycast 配得一塌糊涂、速度堪忧，解析结果没有 CDN 优化。至于撇开 CNNIC 来谈 SDNS 推不推荐使用？SLA 比 DNSPod 的公共 DNS 还惨，解析请求时不时超时，嗯。</p></blockquote>
<h5 id="百度公共-dns">百度公共 DNS</h5>
<p>北京、南京、深圳
<a href="https://dudns.baidu.com/">https://dudns.baidu.com/</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">IPv4：180.76.76.76
</span></span><span class="line"><span class="cl">IPv6：2400:da00::6666
</span></span></code></pre></div><blockquote>
<p>百度的名声现在怕是比 CNNIC 还要臭得多，他们的公共 DNS 于 2017 年上线，现在也不被太多人知道，不过还是简单提两笔：百度也为公共 DNS 也配置了 Anycast，国内是<del>单点百度北京数据中心</del>北京、南京、深圳三点，海外是单点百度香港数据中心。用的人少，也许不容易被运营商劫持，有兴趣的可以试一试看。</p></blockquote>
<h2 id="enjoy-it">Enjoy it</h2>
<p>到这里，你已经完成了树莓派的安装与初始化设置，你可以开始使用你的树莓派，做出令人惊叹的作品了！</p>
<p>希望你喜欢这篇文章，如果对你有帮助的话，别忘了点赞、收藏、分享和点击订阅，并留意更新动态。</p>
<p>Stay creative, and I will see you next time!</p>
<hr>
<p>本作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">知识共享署名 - 非商业性使用 - 相同方式共享 4.0 国际许可协议</a>进行许可。</p>
<p>参考文献：</p>
]]></content:encoded>
    </item>
    <item>
      <title>树莓派使用 V2Ray 魔法上网</title>
      <link>https://weixiang.github.io/posts/raspberry-pi-uses-v2ray-magic-to-surf-the-internet/</link>
      <pubDate>Mon, 13 Jul 2020 03:39:00 +0800</pubDate>
      <guid>https://weixiang.github.io/posts/raspberry-pi-uses-v2ray-magic-to-surf-the-internet/</guid>
      <description>本文将向你介绍如何使用树莓派配置和安装 V2Ray 和 privoxy，让树莓派顺畅访问国际互联网，并为局域网内的其他的设备提供 socks5 代理和 http 代理服务。</description>
      <content:encoded><![CDATA[<blockquote>
<p>请注意：由于 V2Ray 项目变动，本文的操作方法已经失效，但仍具一定参考价值</p></blockquote>
<p>本文将向你介绍如何使用树莓派配置和安装 <code>V2Ray</code> 和 <code>privoxy</code> ，让树莓派顺畅访问国际互联网，并为局域网内的其他的设备提供 <code>socks5代理</code>和 <code>http代理</code>服务。</p>
<p>先来给大家解释一下基本原理：</p>
<p><img alt="image-20200410145120973" loading="lazy" src="https://jacob-1256058189.cos.ap-guangzhou.myqcloud.com/markdown/image-20200410145120973.webp"></p>
<p>啊不好意思放错了，应该是这张：</p>
<p><img alt="File:VPN overview-en.svg" loading="lazy" src="https://jacob-1256058189.cos.ap-guangzhou.myqcloud.com/markdown/567px-VPN_overview-en.svg.webp"></p>
<p>我们这篇文章要实现的目标是：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">graph LR
</span></span><span class="line"><span class="cl">A(你的设备/树莓派) --&gt; B(树莓派 Privoxy)
</span></span><span class="line"><span class="cl">B --&gt; |普通域名| E(目标网站)
</span></span><span class="line"><span class="cl">B --&gt; |魔法域名| C(树莓派 V2Ray 客户端) --&gt; D(V2Ray服务端) --&gt; E(目标网站)
</span></span><span class="line"><span class="cl">B --&gt; |广告域名| F(拦截)
</span></span></code></pre></div><h2 id="需要准备的材料">需要准备的材料</h2>
<ul>
<li>树莓派（以 3B+ 为例）</li>
<li>电源（5V，不小于 2A）</li>
<li>8G 以上的高速 TF 卡</li>
<li>电脑（以 Windows 为例）</li>
<li>网线</li>
<li>互联网连接（推荐使用 真 · 互联网）</li>
</ul>
<h2 id="安装和配置-v2ray">安装和配置 V2Ray</h2>
<h3 id="什么是-v2ray">什么是 V2Ray？</h3>
<p>V2Ray 是 Project V 下的一个工具。Project V 是一个包含一系列构建特定网络环境工具的项目，而 V2Ray 属于最核心的一个。官方中介绍 <code>Project V 提供了单一的内核和多种界面操作方式。内核（V2Ray）用于实际的网络交互、路由等针对网络数据的处理，而外围的用户界面程序提供了方便直接的操作流程。</code>不过从时间上来说，先有 V2Ray 才有 Project V。如果还是不理解，那么简单地说，V2Ray 是一个与 Shadowsocks 类似的代理软件，可以用来科学上网（施展魔法）学习国外先进科学技术。</p>
<h3 id="安装-v2ray">安装 V2Ray</h3>
<p>安装 V2Ray。可以使用 V2Ray 提供的 go.sh 脚本安装，由于 GFW 会恶化对 GitHub 的访问，直接运行脚本几乎无法安装，建议先从 <a href="https://github.com/v2ray/v2ray-core/releases">v2ray-core/releases</a> 将安装包<code>v2ray-linux-arm.zip</code>下载到树莓派，使用<code>--local</code>参数从本地安装</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">wget -O v2ray_install.sh  https://install.direct/go.sh
</span></span><span class="line"><span class="cl">chmod +x v2ray_install.sh
</span></span><span class="line"><span class="cl">sudo ./v2ray_install.sh --local v2ray-linux-arm.zip
</span></span></code></pre></div><h3 id="配置-v2ray">配置 V2Ray</h3>
<p>通过 v2rayN 可以导出节点配置为客户端配置，以下为 WS+TLS 的配置文件示例（请勿直接使用以下配置）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;policy&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;system&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;statsInboundUplink&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;statsInboundDownlink&#34;</span><span class="p">:</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;log&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;access&#34;</span><span class="p">:</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;error&#34;</span><span class="p">:</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;loglevel&#34;</span><span class="p">:</span> <span class="s2">&#34;warning&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;inbounds&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;tag&#34;</span><span class="p">:</span> <span class="s2">&#34;proxy&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;port&#34;</span><span class="p">:</span> <span class="mi">1080</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;listen&#34;</span><span class="p">:</span> <span class="s2">&#34;0.0.0.0&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;protocol&#34;</span><span class="p">:</span> <span class="s2">&#34;socks&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;sniffing&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;enabled&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;destOverride&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">          <span class="s2">&#34;http&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="s2">&#34;tls&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="p">]</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;settings&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;auth&#34;</span><span class="p">:</span> <span class="s2">&#34;noauth&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;udp&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;ip&#34;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;address&#34;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;clients&#34;</span><span class="p">:</span> <span class="kc">null</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;streamSettings&#34;</span><span class="p">:</span> <span class="kc">null</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;tag&#34;</span><span class="p">:</span> <span class="s2">&#34;api&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;port&#34;</span><span class="p">:</span> <span class="mi">8224</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;listen&#34;</span><span class="p">:</span> <span class="s2">&#34;127.0.0.1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;protocol&#34;</span><span class="p">:</span> <span class="s2">&#34;dokodemo-door&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;sniffing&#34;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;settings&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;auth&#34;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;udp&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;ip&#34;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;address&#34;</span><span class="p">:</span> <span class="s2">&#34;127.0.0.1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;clients&#34;</span><span class="p">:</span> <span class="kc">null</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;streamSettings&#34;</span><span class="p">:</span> <span class="kc">null</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">],</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;outbounds&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;tag&#34;</span><span class="p">:</span> <span class="s2">&#34;proxy&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;protocol&#34;</span><span class="p">:</span> <span class="s2">&#34;vmess&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;settings&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;vnext&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">          <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;address&#34;</span><span class="p">:</span> <span class="s2">&#34;192.19.108.30&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;port&#34;</span><span class="p">:</span> <span class="mi">443</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;users&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">              <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="s2">&#34;96603728-5243-4b0a-94c1-0b4c22a69eeb&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&#34;alterId&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&#34;email&#34;</span><span class="p">:</span> <span class="s2">&#34;t@t.tt&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&#34;security&#34;</span><span class="p">:</span> <span class="s2">&#34;auto&#34;</span>
</span></span><span class="line"><span class="cl">              <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="p">]</span>
</span></span><span class="line"><span class="cl">          <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;servers&#34;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;response&#34;</span><span class="p">:</span> <span class="kc">null</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;streamSettings&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;network&#34;</span><span class="p">:</span> <span class="s2">&#34;ws&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;security&#34;</span><span class="p">:</span> <span class="s2">&#34;tls&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;tlsSettings&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nt">&#34;allowInsecure&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="nt">&#34;serverName&#34;</span><span class="p">:</span> <span class="s2">&#34;v2ray.com&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;tcpSettings&#34;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;kcpSettings&#34;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;wsSettings&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nt">&#34;connectionReuse&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="nt">&#34;path&#34;</span><span class="p">:</span> <span class="s2">&#34;/v2ray&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="nt">&#34;headers&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;Host&#34;</span><span class="p">:</span> <span class="s2">&#34;v2ray.com&#34;</span>
</span></span><span class="line"><span class="cl">          <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;httpSettings&#34;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;quicSettings&#34;</span><span class="p">:</span> <span class="kc">null</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;mux&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;enabled&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;concurrency&#34;</span><span class="p">:</span> <span class="mi">8</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;tag&#34;</span><span class="p">:</span> <span class="s2">&#34;direct&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;protocol&#34;</span><span class="p">:</span> <span class="s2">&#34;freedom&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;settings&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;vnext&#34;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;servers&#34;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;response&#34;</span><span class="p">:</span> <span class="kc">null</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;streamSettings&#34;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;mux&#34;</span><span class="p">:</span> <span class="kc">null</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;tag&#34;</span><span class="p">:</span> <span class="s2">&#34;block&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;protocol&#34;</span><span class="p">:</span> <span class="s2">&#34;blackhole&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;settings&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;vnext&#34;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;servers&#34;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;response&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;http&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;streamSettings&#34;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;mux&#34;</span><span class="p">:</span> <span class="kc">null</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">],</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;stats&#34;</span><span class="p">:</span> <span class="p">{},</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;api&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;tag&#34;</span><span class="p">:</span> <span class="s2">&#34;api&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;services&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;StatsService&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;dns&#34;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;routing&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;domainStrategy&#34;</span><span class="p">:</span> <span class="s2">&#34;IPIfNonMatch&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;rules&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;field&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;port&#34;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;inboundTag&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">          <span class="s2">&#34;api&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;outboundTag&#34;</span><span class="p">:</span> <span class="s2">&#34;api&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;ip&#34;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;domain&#34;</span><span class="p">:</span> <span class="kc">null</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>将配置文件上传到树莓派，使用下面的命令替换默认配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo mv config.json /etc/v2ray/
</span></span></code></pre></div><p>检查配置文件并添加到系统启动项</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">/usr/bin/v2ray/v2ray -test -config /etc/v2ray/config.json <span class="c1"># 查看配置文件是否出错</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo systemctl start v2ray <span class="c1"># 启动v2ray服务</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo systemctl status v2ray <span class="c1"># 查看v2ray运行状态</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo systemctl <span class="nb">enable</span> v2ray <span class="c1"># 将v2ray加入开机自启动</span>
</span></span></code></pre></div><p>执行 <code>curl -so /dev/null -w &quot;%{http_code}&quot; google.com -x socks5://127.0.0.1:1080</code> 确认 V2Ray 已经可以使用魔法 (命令中 Socks5 指 inbound 协议为 socks，1080 指该 inbound 端口是 1080)。如果执行这个命令出现了 301 或 200 这类数字的话代表可以使用魔法，如果长时间没反应或者是 000 的话说明不可以使用魔法。[^1]</p>
<h2 id="privoxy-使用指南">Privoxy 使用指南</h2>
<p>Privoxy 是一个免费的开源非缓存 Web 代理，可以过滤和处理传入的数据。</p>
<p>使用 Privoxy，我们可以让树莓派变成你的局域网代理服务器。</p>
<p><a href="https://www.privoxy.org/">Privoxy</a> 的<a href="https://www.privoxy.org/">好处</a>是，可以在网页数据到达浏览器之前对其进行过滤和操作。</p>
<p>这也意味着可以使用 Privoxy 充当浏览器的广告拦截器。</p>
<h3 id="简介精简版">简介精简版</h3>
<p><a href="https://www.privoxy.org/">Privoxy</a> 是个很朴素但很强大的工具，基本功能和 <a href="https://proxy-switchyomega.com/">switchyomega</a> 类似：根据规则来处理请求流向 —— 但不仅限于影响浏览器，我理解它介于 iptables 和 Switchyomega 之间。可以把接收到的请求，根据规则转发到下一次代理：比如 1080 常用来使用魔法，那么 Google 就走 1080，百度不需要使用魔法就直连。还可以根据规则屏蔽广告和垃圾站点。</p>
<h3 id="简介故事版">简介故事版</h3>
<p>电脑联网了，就像在大山里的村庄有了一条通往市里的路，我们发起的所有请求，都会通过这条路走出去。有一天你发现这条路走下去，到另一个方向的城市会南辕北辙走不通，但是这条路附近呢又有另一个村子，到那边就能通了，所以你在路上开了一条小路去那个村子借道：第一个城市就是我们平常的请求比如百度淘宝知乎，第二条路走下去可能是谷歌脸书推特油管，也有可能是公司的内网环境，另一个村子就是 VPN，它或许是墙外的节点，或许是公司里那个看门的。</p>
<p>这些路怎么走通往哪里，你知道了，但其他村民可能不知道，他们走到岔路口不知道它是通往哪里的，所以你就立了个路牌了做指向。Privoxy 是这个路牌，Switchyomega 也是这个路牌，<a href="https://www.proxifier.com/">proxifier</a> 也是路牌之一 (mac 和 Windows 可用，有 GUI 和请求的详细日志，要花钱的)。这样理解的话，所有类型的 VPN 该怎么用就都好配置了。</p>
<p>不建议盲目开全局，虽然它可能经常是管用的，但实际上所有流量都走了 &ldquo;另一个村子&rdquo; 再绕回来，天寒地冻路远不说，而且像网易这样的 &ldquo;店面&rdquo;，绕一下它可能就不接待你了 (他只认你哪里来的)。</p>
<h3 id="在-树莓派上安装-privoxy">在 树莓派上安装 Privoxy</h3>
<p>各个 Linux 发行版源里都有，直接包管理器装即可。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo apt-get -y install privoxy <span class="c1"># 安装privoxy</span>
</span></span></code></pre></div><p>mac 可以 <code>brew install privoxy</code> ，然后用 brew sevices 子命令管理。( 官方也有提供<a href="https://www.privoxy.org/sf-download-mirror/">安装包</a> )</p>
<p>Windows, 官方同样给了包和安装文档，但是等有空再写吧（其实基本就不想弄了…</p>
<h3 id="配置">配置</h3>
<p>在开始本节之前，强烈建议确保树莓派有静态的局域网 IP 地址。</p>
<p>可以通过以下命令来查看树莓派的 IP</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">hostname-I
</span></span></code></pre></div><p>debian 装 privoxy，它的配置文件里注释写的跟论文一样长，最开始的时候就被吓退了。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">~ λ k -h /etc/privoxy
</span></span><span class="line"><span class="cl"> config                      <span class="c1"># 主配置文件</span>
</span></span><span class="line"><span class="cl"> default.action
</span></span><span class="line"><span class="cl"> default.filter
</span></span><span class="line"><span class="cl"> gfwlist.action              <span class="c1"># 自己生成的，用了 gfwlist 清单</span>
</span></span><span class="line"><span class="cl"> match-all.action 
</span></span><span class="line"><span class="cl"> regression-tests.action 
</span></span><span class="line"><span class="cl"> templates 
</span></span><span class="line"><span class="cl"> trust 
</span></span><span class="line"><span class="cl"> user.action
</span></span><span class="line"><span class="cl"> user.filter
</span></span></code></pre></div><p>config 文件处理 :</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo cp /etc/privoxy/config /etc/privoxy/config.bak    <span class="c1"># 做个备份</span>
</span></span><span class="line"><span class="cl">sudo nano /etc/privoxy/config  <span class="c1"># 编辑配置文件</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 修改监听范围和端口（任选一句）</span>
</span></span><span class="line"><span class="cl">listen-address 127.0.0.1:8118  <span class="c1"># 监听本机的8118端口（仅树莓派魔法）</span>
</span></span><span class="line"><span class="cl">listen-address 0.0.0.0:8118    <span class="c1"># 监听本机+局域网的8118端口（树莓派+局域网魔法）</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 添加代理规则（任选一句）</span>
</span></span><span class="line"><span class="cl">actionsfile gfwlist.action     <span class="c1"># 让 privoxy 加载 gfwlist.action 实现智能分流</span>
</span></span><span class="line"><span class="cl">forward-socks5t / 127.0.0.1:1080 .  <span class="c1"># 全局代理无分流，注意后面还有一个点</span>
</span></span></code></pre></div><p>完成后，按 <code>CTRL+ X</code> ，然后按 <code>Y</code> ，最后按 <code>ENTER</code> 保存文件。</p>
<h4 id="生成-gfwlistaction-文件">生成 gfwlist.action 文件</h4>
<p>这个项目可以很方便的帮忙生成这个配置：<a href="https://github.com/zfl9/gfwlist2privoxy">https://github.com/zfl9/gfwlist2privoxy</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -4sSkLO https://raw.github.com/zfl9/gfwlist2privoxy/master/gfwlist2privoxy
</span></span><span class="line"><span class="cl">sudo mv gfwlist2privoxy /usr/local/bin <span class="o">&amp;&amp;</span> sudo chmod a+x /usr/local/bin/gfwlist2privoxy
</span></span><span class="line"><span class="cl"><span class="c1"># 放到 &#34;PATH&#34; 里保留，常用的</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">bash gfwlist2privoxy 127.0.0.1:1080
</span></span><span class="line"><span class="cl"><span class="c1">#  注意将 127.0.0.1:1080 替换为你的 socks5 地址</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo mv -f gfwlist.action /etc/privoxy/
</span></span><span class="line"><span class="cl"><span class="c1"># gfwlist.action 移动到 privoxy 配置文件目录</span>
</span></span><span class="line"><span class="cl">sudo systemctl restart privoxy
</span></span><span class="line"><span class="cl"><span class="c1"># 重启一下确保配置生效</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo service privoxy status
</span></span><span class="line"><span class="cl"><span class="c1"># 查看privoxy运行状态</span>
</span></span></code></pre></div><p>tips: Privoxy 启动后，你设备配置好 HTTP 代理后，浏览器里输入 <code>http://p.p</code> ，你可以看到 Privoxy 成功启动的界面。</p>
<h4 id="自定义配置">自定义配置</h4>
<p>如果你有公司的 VPN，Git 仓库或者其他办公站点也需要走代理，可以很方便的加一个配置。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo touch /etc/proxy/autovpn.action
</span></span><span class="line"><span class="cl">sudo <span class="nb">echo</span> <span class="s1">&#39;actionsfile autovpn.action&#39;</span> &gt;&gt;/etc/privoxy/config
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 以下注释可以删除</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo cat &gt; /etc/proxy/autovpn.action <span class="s">&lt;&lt;EOF
</span></span></span><span class="line"><span class="cl"><span class="s">{{alias}}
</span></span></span><span class="line"><span class="cl"><span class="s">alauda = +forward-override{forward-socks5 127.0.0.1:5087 .}
</span></span></span><span class="line"><span class="cl"><span class="s"># alias 是定义别名的意思，可以在此处定义转发规则
</span></span></span><span class="line"><span class="cl"><span class="s">{alauda}
</span></span></span><span class="line"><span class="cl"><span class="s">.alauda.io
</span></span></span><span class="line"><span class="cl"><span class="s">.alaudatech.com
</span></span></span><span class="line"><span class="cl"><span class="s"># 引用别名，在其后紧跟需要适配这个规则的域名
</span></span></span><span class="line"><span class="cl"><span class="s"># 支持泛域名，比如 .baidu.com 可以匹配 www.baidu.com，tieba.baidu.com
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo systemctl restart privoxy
</span></span><span class="line"><span class="cl"><span class="c1"># 重启一下确保配置生效</span>
</span></span></code></pre></div><h3 id="开始施展魔法">开始施展魔法</h3>
<h4 id="树莓派">树莓派</h4>
<h5 id="浏览器">浏览器</h5>
<p>在 Chrome 中：</p>
<ol>
<li>打开“ <code>Settings</code>”菜单，或在地址栏中输入<code>chrome://settings</code></li>
<li>向下滚动到底部</li>
<li>点击“ <strong>高级</strong> ”打开高级设置</li>
<li>向下滚动，直到看到“ <strong>系统</strong> ”选项</li>
<li>点击 <code>打开您计算机的代理设置</code></li>
</ol>
<p><strong>IP 地址</strong>填入树莓派的 IP，<strong>端口</strong>默认情况下应设置为<code>8118</code>（Privoxy 监听的端口）</p>
<p>或者：Chrome、Firefox 有 Switchyomega 这个插件可以处理转发规则，配置也简单，但需要各自配置，使用 Privoxy 可以集中在一个地方处理。修改浏览器的代理，使用 <code>http://localhost:8118</code> 即可。</p>
<h5 id="终端">终端</h5>
<h6 id="方法-1">方法 1</h6>
<p>在终端中直接运行命令</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 示例：本地 HTTP 代理</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span>  <span class="nv">http_proxy</span><span class="o">=</span>http://localhost:8118
</span></span><span class="line"><span class="cl"><span class="nb">export</span>  <span class="nv">https_proxy</span><span class="o">=</span>http://localhost:8118
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 示例：本地 Socks5 代理</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">http_proxy</span><span class="o">=</span>socks5://127.0.0.1:1080
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">https_proxy</span><span class="o">=</span>socks5://127.0.0.1:1080
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 也可以用 ALL_PROXY</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">ALL_PROXY</span><span class="o">=</span>socks5://localhost:1080
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 如果代理服务器需要登陆，这时可以直接把用户名和密码写进去</span>
</span></span><span class="line"><span class="cl"><span class="nv">http_proxy</span><span class="o">=</span>http://userName:password@proxyAddress:port
</span></span></code></pre></div><p>设置完毕后 <code>wget</code> <code>curl</code> 这类网络命令都会经过设置的代理。</p>
<p><code>localhost</code> 就是一个域名，域名默认指向 <code>127.0.0.1</code>，两者是一样的。</p>
<p>这个办法的好处是简单直接，并且影响面很小，只对当前终端有效，退出就不行了。</p>
<h6 id="方法-2">方法 2</h6>
<p>把代理服务器地址写入 shell 配置文件<code>.bashrc</code> 或者<code>.zshrc</code></p>
<p>直接在<code>.bashrc</code> 或者<code>.zshrc</code> 添加下面内容</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 示例：本地 HTTP 代理</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">http_proxy</span><span class="o">=</span><span class="s2">&#34;http://localhost:port&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">https_proxy</span><span class="o">=</span><span class="s2">&#34;http://localhost:port&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 示例：本地 Socks5 代理</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">http_proxy</span><span class="o">=</span><span class="s2">&#34;socks5://127.0.0.1:1080&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">https_proxy</span><span class="o">=</span><span class="s2">&#34;socks5://127.0.0.1:1080&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 也可以用 ALL_PROXY</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">ALL_PROXY</span><span class="o">=</span>socks5://127.0.0.1:1080
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 如果代理服务器需要登陆，这时可以直接把用户名和密码写进去</span>
</span></span><span class="line"><span class="cl"><span class="nv">http_proxy</span><span class="o">=</span>http://userName:password@proxyAddress:port
</span></span></code></pre></div><p>然后 <code>Ctrl + X</code> 保存文件，接着在终端中执行 <code>source ~/.bashrc</code></p>
<p>或者退出当前终端再起一个终端。这个办法的好处是把代理服务器永久保存了，下次就可以直接用了。</p>
<p>或者通过设置 Alias 简写来简化操作，每次要用的时候输入 <code>setproxy</code>，不用了就 <code>unsetproxy</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">setproxy</span><span class="o">=</span><span class="s2">&#34;export ALL_PROXY=socks5://127.0.0.1:1080&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">unsetproxy</span><span class="o">=</span><span class="s2">&#34;unset ALL_PROXY&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">ip</span><span class="o">=</span><span class="s2">&#34;curl -i http://ip.cn&#34;</span>
</span></span></code></pre></div><h6 id="方法-3">方法 3</h6>
<p>改相应工具的配置</p>
<p>比如 <code>apt</code> 的配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo nano /etc/apt/apt.conf
</span></span></code></pre></div><p>在文件末尾加入下面这行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">Acquire::http::Proxy <span class="s2">&#34;http://proxyAddress:port&#34;</span>
</span></span></code></pre></div><p>保存 <code>apt.conf</code> 文件即可。</p>
<p>更多关于 <code>apt</code> 的代理设置可以参考 <a href="https://askubuntu.com/questions/349702/apt-conf-acquirehttpproxy-proxyserverport-seems-not-to-be-used-ubuntu-13">ASK UBUNTU 里的这个问题</a></p>
<p>Git 的设置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">git config --global http.proxy &#39;socks5://127.0.0.1:1080&#39; 
</span></span><span class="line"><span class="cl">git config --global https.proxy &#39;socks5://127.0.0.1:1080&#39;
</span></span></code></pre></div><p>Git 仓库有的在国内有的在国外，国内的有 GitCafe、Coding.net、开源中国 Git，所以用国内的就没必要设置了，反而会慢。</p>
<h4 id="局域网内其他设备使用">局域网内其他设备使用</h4>
<h5 id="浏览器-1">浏览器</h5>
<p>每种浏览器的设置不同，下面是一份快速指南：</p>
<ul>
<li>在 Chrome 中：</li>
</ul>
<ol>
<li>打开“ <code>Settings</code>”菜单，或在地址栏中输入<code>chrome://settings</code></li>
<li>向下滚动到底部</li>
<li>点击“ <strong>高级</strong> ”打开高级设置</li>
<li>向下滚动，直到看到“ <strong>系统</strong> ”选项</li>
<li>点击<code>打开您计算机的代理设置</code></li>
</ol>
<ul>
<li>在 Firefox 中：
<ol>
<li>打开<code>Options</code>菜单，或在地址栏中输入<code>about:preferences</code></li>
<li>向下滚动到底部</li>
<li>点击<code>Settings...</code>标题下的 <code>Network Settings</code>按钮</li>
</ol>
</li>
<li>在 Internet Explorer 中：
<ol>
<li>转到<strong>设置</strong>。</li>
<li>点击 <code>Connections</code>标签。</li>
<li>点击 <code>LAN settings</code>按钮。</li>
<li>勾选 <code>Use a proxy server for your LAN</code></li>
</ol>
</li>
</ul>
<p><strong>IP 地址</strong>填入树莓派的 IP，<strong>端口</strong>默认情况下应设置为<code>8118</code>（Privoxy 监听的端口）</p>
<p>也可以用 Switchyomega 这个插件处理转发规则，使用 <code>http://树莓派IP:8118</code> 即可。</p>
<h5 id="设置系统网络代理服务器">设置系统网络代理服务器</h5>
<p>一般在电脑、手机等设备的网络连接设置的高级选项里，都有设置代理服务器的地方，服务器填入树莓派 IP，端口填入 8118，认证选择无，保存即可生效，开始感受宛如置身海外的上网冲浪体验吧。</p>
<h2 id="验证树莓派代理服务器">验证树莓派代理服务器</h2>
<p>将代理设置配置为指向树莓派后，在浏览器中打开下面的地址</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">http://config.privoxy.org/
</span></span></code></pre></div><p>如果一切运行正常，可以看到 Privoxy 的欢迎界面：</p>
<p><img alt="image-20200414115516257" loading="lazy" src="https://jacob-1256058189.cos.ap-guangzhou.myqcloud.com/markdown/202408082146488.webp"></p>
<p>如果显示的是 <strong>Privoxy is not being used</strong> ，就要检查一下检查代理设置是否正确了。</p>
<h2 id="enjoy-it">Enjoy it</h2>
<p>到这里，你已经完成了树莓派魔法的安装与配置，你可以开始使用你的树莓派访问真正的互联网，并为局域网内的其他设备提供魔法代理服务。</p>
<p>希望你喜欢这篇文章，如果对你有帮助的话，别忘了点赞、收藏、分享和点击订阅，并留意更新动态。</p>
<p>Stay creative, and I will see you next time!</p>
<hr>
<p><img alt="知识共享许可协议" loading="lazy" src="https://jacob-1256058189.cos.ap-guangzhou.myqcloud.com/markdown/by-nc-sa.webp"></p>
<p>本作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">知识共享署名 - 非商业性使用 - 相同方式共享 4.0 国际许可协议</a>进行许可。</p>
<p>参考文献：</p>
<p>[Ask Ubuntu]: <a href="https://askubuntu.com/questions/349702/apt-conf-acquirehttpproxy-proxyserverport-seems-not-to-be-used-ubuntu-13">https://askubuntu.com/questions/349702/apt-conf-acquirehttpproxy-proxyserverport-seems-not-to-be-used-ubuntu-13</a> &ldquo;apt.conf “Acquire::http:Proxy ”proxyserver:port&rdquo; seems not to be used (Ubuntu 13.04 under Virtual Box on Win7)&quot;</p>
]]></content:encoded>
    </item>
    <item>
      <title>树莓派的安装与初始化</title>
      <link>https://weixiang.github.io/posts/installation-and-initialization-of-raspberry-pi/</link>
      <pubDate>Thu, 02 Apr 2020 05:22:00 +0800</pubDate>
      <guid>https://weixiang.github.io/posts/installation-and-initialization-of-raspberry-pi/</guid>
      <description>Raspbian 是树莓派的开发与维护机构 The Raspbeery Pi Foundation“树莓派基金会”，推荐用于树莓派的首选系统。本文展示的是在没有外接显示屏的情况下的树莓派的初始化安装，以及如何连接到树莓派。</description>
      <content:encoded><![CDATA[<p>树莓派（英语：Raspberry Pi）是基于 Linux 的 单片机电脑，由英国树莓派基金会开发，目的是以低价硬件及自由软件促进学校的基本计算机科学教育。</p>
<p>Raspbian 是专门用于 ARM 卡片式计算机 Raspberry Pi® “树莓派”的操作系统。</p>
<p>Raspberry Pi® “树莓派”是 2012 年问世的 ARM 计算机，旨在为儿童和所有的计算机爱好者提供一套廉价的编程学习与硬件 DIY 平台。树莓派基于 ARM11，具有 1080P 高清视频解析能力，附带用于硬件开发的 GPIO 接口，使用 Linux 操作系统。售价仅 $25~$35。</p>
<p>Raspbian 系统是 Debian 7.0/wheezy 的定制版本。得益于 Debian 从 7.0/wheezy 开始引入的“带硬件浮点加速的 ARM 架构”(armhf)，Debian 7.0 在树莓派上的运行性能有了很大提升。Raspbian 默认使用 LXDE 桌面，内置 C 和 Python 编译器。</p>
<p>Raspbian 是树莓派的开发与维护机构 The Raspbeery Pi Foundation“树莓派基金会”，推荐用于树莓派的首选系统。</p>
<p>本文展示的是在没有外接显示屏的情况下的树莓派的初始化安装，以及如何连接到树莓派。</p>
<h2 id="需要准备的材料">需要准备的材料</h2>
<ul>
<li>树莓派（以 3B+ 为例）</li>
<li>USB 电源适配器（5V，不小于 2A）</li>
<li>USB 电缆</li>
<li>8G 以上的高速 TF 卡</li>
<li>USB 3.0 高速读卡器</li>
<li>电脑（以 Windows 为例）</li>
<li>网线</li>
<li>互联网连接（推荐使用 真 · 互联网）</li>
</ul>
<h2 id="安装-raspbain-系统到-sd-卡">安装 Raspbain 系统到 SD 卡</h2>
<p>对于新手用户，树莓派官方建议使用 <a href="https://www.raspberrypi.org/documentation/installation/installing-images/README.md">Raspberry Pi Imager</a>，将系统镜像写入 SD 卡。也可以使用 balenaEtcher，Win32DiskImager 或 imgFlasher 等工具进行烧录，接有屏幕、键鼠的同学也可以使用 <a href="https://www.raspberrypi.org/downloads/noobs/">NOOBS</a> 来部署系统。</p>
<p>下面以 <a href="https://www.raspberrypi.org/downloads/">Raspberry Pi Imager</a> 为例</p>
<h3 id="下载安装--raspberry-pi-imager">下载安装  <a href="https://www.raspberrypi.org/downloads/">Raspberry Pi Imager</a></h3>
<p>Raspberry Pi Imager 下载地址：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">www</span><span class="o">.</span><span class="n">raspberrypi</span><span class="o">.</span><span class="n">org</span><span class="o">/</span><span class="n">downloads</span><span class="o">/</span>
</span></span></code></pre></div><p>因为众所周知的原因，可能需要一些魔法才能下载成功。</p>
<p>安装后打开的软件界面是这样的，是不是超级简单：</p>
<p><img alt="Raspberry Pi Imager" loading="lazy" src="https://jacob-1256058189.cos.ap-guangzhou.myqcloud.com/markdown/image-20200409180805444.webp"></p>
<h3 id="格式化-sd-卡">格式化 SD 卡</h3>
<p>首先要格式化 SD 卡，在第一项 Choose OS 里选择 Erase，然后选好要格式化的 SD 卡，最后点 Write 即可。</p>
<p><img alt="image-20200409181322292" loading="lazy" src="https://jacob-1256058189.cos.ap-guangzhou.myqcloud.com/markdown/image-20200409181731951.webp"></p>
<h3 id="烧录镜像">烧录镜像</h3>
<p>在 Choose OS 里选择第一项 Raspbain 即可，软件会自动下载并烧录进去，如果要使用本地的镜像文件，要注意文件路径中不要有中文。</p>
<p>因为众所周知的原因，可能需要一些魔法才能下载成功。</p>
<p><img alt="image-20200409181731951" loading="lazy" src="https://jacob-1256058189.cos.ap-guangzhou.myqcloud.com/markdown/image-20200409181322292.webp"></p>
<p>等进度条跑满，系统镜像就烧写完成啦。</p>
<h2 id="开启-ssh-功能">开启 SSH 功能</h2>
<p>在树莓派将来的使用中，我们要用 SSH 的方式连接树莓派并对其进行操作，但为了安全起见，这个功能默认是关闭的，所以我们需要在 SD 卡的根目录创建一个叫“SSH”的文件，才能开启树莓派的 SSH 功能。</p>
<p>在“此电脑”中找到一个叫“boot”的盘，新建一个 TXT，命名为 <code>SSH</code> 即可，注意不要有后缀！
如果找不到“boot”这个盘，重新拔插一下读卡器即可。</p>
<p><img alt="image-20200409183711203" loading="lazy" src="https://jacob-1256058189.cos.ap-guangzhou.myqcloud.com/markdown/image-20200409194420317.webp"></p>
<h2 id="启动树莓派并找到它">启动树莓派并找到它</h2>
<h3 id="启动树莓派">启动树莓派</h3>
<p>插入烧写好系统的 SD 卡，用网线把树莓派和路由器连接起来，如果有键鼠显示器也要先连接上，最后插上电源，等待树莓派启动即可。</p>
<h3 id="查找树莓派的地址">查找树莓派的地址</h3>
<p>使用浏览器登录路由器的管理页面，一般为 <code>192.168.1.1</code>，输入管理密码（路由器背面可以找到），进入“终端管理”界面，查看树莓派的 IP 地址。最好给树莓派设置一个固定 IP 地址方便后续使用。此步骤不同品牌的路由器操作方法略有不同，不过都大同小异。</p>
<p><img alt="image-20200409194420317" loading="lazy" src="https://jacob-1256058189.cos.ap-guangzhou.myqcloud.com/markdown/image-20200409183711203.webp"></p>
<h2 id="使用-ssh-连接到树莓派">使用 SSH 连接到树莓派</h2>
<p>以 Xshell 为例</p>
<p>Xshell 下载地址：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">https://www.netsarang.com/zh/xshell/
</span></span></code></pre></div><p>打开 Xshell，在左上角点击新建图标，填入名称，树莓派的 IP 地址，点击连接即可。</p>
<p>树莓派默认的账户是 <code>pi</code> ，默认密码是 <code>raspberry</code> 。</p>
<p><img alt="image-20200409195033479" loading="lazy" src="https://jacob-1256058189.cos.ap-guangzhou.myqcloud.com/markdown/image-20200409195033479.webp"></p>
<p>如下图时即连接成功：</p>
<p><img alt="image-20200409195326223" loading="lazy" src="https://jacob-1256058189.cos.ap-guangzhou.myqcloud.com/markdown/image-20200409195326223.webp"></p>
<h2 id="给树莓派换上国内源">给树莓派换上国内源</h2>
<p>因为众所周知的原因，树莓派的默认源速度感人，换上国内的源可以显著提高使用体验。</p>
<p>以清华大学源为例</p>
<p>编辑 <code>/etc/apt/sources.list</code> 文件，</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo nano /etc/apt/sources.list
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 删除原文件所有内容，用以下内容取代：</span>
</span></span><span class="line"><span class="cl">deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main non-free contrib
</span></span><span class="line"><span class="cl">deb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main non-free contrib
</span></span></code></pre></div><p>编辑 <code>/etc/apt/sources.list.d/raspi.list</code> 文件，删除原文件所有内容，用以下内容取代：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo nano /etc/apt/sources.list.d/raspi.list
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 删除原文件所有内容，用以下内容取代：</span>
</span></span><span class="line"><span class="cl">deb http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ buster main ui
</span></span></code></pre></div><p>编辑完毕后用 <code>Ctrl + X</code> 退出，按下 <code>Y</code> 然后回车键确认保存即可。</p>
<p>编辑镜像站后，请使用 <code>sudo apt-get update</code> 命令，更新软件源列表，同时检查您的编辑是否正确。</p>
<h2 id="使用-vnc-连接到树莓派">使用 VNC 连接到树莓派</h2>
<p>虽然 SSH 已经可以满足大部分的操作需求，但图形界面对于新手来说显然更容易上手。</p>
<h3 id="启用-vnc-功能">启用 VNC 功能</h3>
<p>在 SSH 终端中输入</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo raspi-config
</span></span></code></pre></div><p>即可进入下面的配置模式，罗列了扩展系统分区，修改密码，启动设置等等，然后按着图片找到 VNC 选项打开即可。</p>
<p><img alt="image-20200409200744520" loading="lazy" src="https://jacob-1256058189.cos.ap-guangzhou.myqcloud.com/markdown/image-20200409200759386.webp"></p>
<p><img alt="image-20200409200759386" loading="lazy" src="https://jacob-1256058189.cos.ap-guangzhou.myqcloud.com/markdown/image-20200409200744520.webp"></p>
<h3 id="连接到树莓派">连接到树莓派</h3>
<p>下载 VNC 客户端</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">www</span><span class="o">.</span><span class="n">realvnc</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">en</span><span class="o">/</span><span class="n">connect</span><span class="o">/</span><span class="n">download</span><span class="o">/</span><span class="n">viewer</span><span class="o">/</span>
</span></span></code></pre></div><p>打开 VNC 软件，输入树莓派的 IP 地址、账户名密码（上一节有），即可连接。</p>
<p><img alt="image-20200409201641067" loading="lazy" src="https://jacob-1256058189.cos.ap-guangzhou.myqcloud.com/markdown/image-20200409201641067.webp"></p>
<h3 id="完成剩余的设置">完成剩余的设置</h3>
<p>连接成功后即可看到树莓派的桌面和欢迎界面。</p>
<p>在欢迎界面中完成剩余的设置，修改地区、语言、时区、密码等，连接上 WiFi。</p>
<p><img alt="image-20200409201733135" loading="lazy" src="https://jacob-1256058189.cos.ap-guangzhou.myqcloud.com/markdown/image-20200409201733135.webp"></p>
<h2 id="enjoy-it">Enjoy it</h2>
<p>到这里，你已经完成了树莓派的安装与初始化设置，你可以开始使用你的树莓派，做出令人惊叹的作品了！</p>
<p>希望你喜欢这篇文章，如果对你有帮助的话，别忘了点赞、收藏、分享和点击订阅，并留意更新动态。</p>
<p>Stay creative, and I will see you next time!</p>
<hr>
<p><img alt="知识共享许可协议" loading="lazy" src="https://jacob-1256058189.cos.ap-guangzhou.myqcloud.com/markdown/by-nc-sa.webp"></p>
<p>本作品采用<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">知识共享署名 - 非商业性使用 - 相同方式共享 4.0 国际许可协议</a>进行许可。</p>
<p>参考文献：</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
