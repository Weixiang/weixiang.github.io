<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>硬件 on Jacob&#39;s Thoughts</title>
    <link>https://weixiang.github.io/categories/%E7%A1%AC%E4%BB%B6/</link>
    <description>Recent content in 硬件 on Jacob&#39;s Thoughts</description>
    <generator>Hugo -- 0.146.4</generator>
    <language>zh</language>
    <copyright>©2017-2025 Jacob&amp;rsquo;s Thoughts</copyright>
    <lastBuildDate>Tue, 15 Apr 2025 21:36:21 +0800</lastBuildDate>
    <atom:link href="https://weixiang.github.io/categories/%E7%A1%AC%E4%BB%B6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用 STM32CubeIDE 开发 STM32F103C8</title>
      <link>https://weixiang.github.io/posts/developing-for-stm32f103c8-using-stm32cubeide/</link>
      <pubDate>Tue, 15 Apr 2025 21:36:21 +0800</pubDate>
      <guid>https://weixiang.github.io/posts/developing-for-stm32f103c8-using-stm32cubeide/</guid>
      <description>STM32CubeIDE 是一体式多操作系统开发工具，是 STM32Cube 软件生态系统的一部分。本文利用 STM32CubeIDE 搭建 STM32F103C8 的开发环境。</description>
      <content:encoded><![CDATA[<p>本文基于版本：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">STM32CubeIDE
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Version: 1.18.1
</span></span><span class="line"><span class="cl">Build: 24813_20250409_2138 (UTC)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">(C) 2025 STMicroelectronics ALL RIGHTS RESERVED
</span></span></code></pre></div><h2 id="下载与安装-stm32cubeide">下载与安装 STM32CubeIDE</h2>
<p><a href="https://www.st.com.cn/zh/development-tools/stm32cubeide.html">STM32CubeIDE - STM32 的集成开发环境 - 意法半导体 STMicroelectronics</a></p>
<p>需要注册登录后，填写一些信息才可以下载。</p>
<p>安装过程一路选“是”即可。</p>
<h2 id="配置-stm32cubeide">配置 STM32CubeIDE</h2>
<p>双击桌面图标运行，提示选择工作空间，选择为一个不含中文的路径即可。</p>
<h3 id="安装语言包">安装语言包</h3>
<p>C，点击 <code>Add</code>，在 <code>Name</code> 栏填入 <code>language</code>；<code>Location</code> 栏填入下面的链接，然后点击添加，在弹出来的界面选择简体中文语言包，安装后按提示重启软件即可。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">https://mirrors.ustc.edu.cn/eclipse/technology/babel/update-site/latest/
</span></span></code></pre></div><h3 id="安装固件包">安装固件包</h3>
<p>在 STM32CubeIDE 菜单栏选择 <code>Help - Configuration Tool - Manage Embedded Software Packages</code>，安装所需平台的 MCU 包即可。此处安装 STM32F1 系列最新固件包。</p>
<p><img alt="image.png" loading="lazy" src="https://jacob-1256058189.cos.ap-guangzhou.myqcloud.com/md/2025/04/427f0b620c513520.png"></p>
<p>等待下载完成后，关闭界面。</p>
<h2 id="配置项目">配置项目</h2>
<p>选择 <code>文件 - 新建 - STM32 Project</code>，进入芯片选择界面，输入芯片型号后选择。</p>
<p><img alt="image.png" loading="lazy" src="https://jacob-1256058189.cos.ap-guangzhou.myqcloud.com/md/2025/04/be782ed09be1a62c.png"></p>
<p>点击下一步，在 <code>Project Name</code> 中填写项目的名称。</p>
<p><img alt="image.png" loading="lazy" src="https://jacob-1256058189.cos.ap-guangzhou.myqcloud.com/md/2025/04/fccf753661b93f1c.png"></p>
<p>点击完成，进入工程设置页面。</p>
<h2 id="配置芯片">配置芯片</h2>
<p>SYS</p>
<p><img alt="image.png" loading="lazy" src="https://jacob-1256058189.cos.ap-guangzhou.myqcloud.com/md/2025/04/bdf0cbff4201046c.png"></p>
<p>RCC</p>
<p><img alt="image.png" loading="lazy" src="https://jacob-1256058189.cos.ap-guangzhou.myqcloud.com/md/2025/04/8044b3853d8a7731.png"></p>
<p>时钟，此处需要参考数据手册，若与本文同型号可照抄。</p>
<p><img alt="image.png" loading="lazy" src="https://jacob-1256058189.cos.ap-guangzhou.myqcloud.com/md/2025/04/799a4eb22c9330ce.png"></p>
<p>若需要使用 FreeRTOS，可在此处添加。</p>
<p><img alt="image.png" loading="lazy" src="https://jacob-1256058189.cos.ap-guangzhou.myqcloud.com/md/2025/04/898f40e512fa1f39.png"></p>
<p>配置代码生成器</p>
<p><img alt="image.png" loading="lazy" src="https://jacob-1256058189.cos.ap-guangzhou.myqcloud.com/md/2025/04/336d532fcb882587.png"></p>
<p>配置 LED 指示灯，根据原理图，将 LED 连接的 GPIO 设置为 <code>GPIO_Output</code>，并且给引脚取名为 LED。</p>
<p><img alt="image.png" loading="lazy" src="https://jacob-1256058189.cos.ap-guangzhou.myqcloud.com/md/2025/04/cc0260878d2d6d4e.png"></p>
<p><img alt="image.png" loading="lazy" src="https://jacob-1256058189.cos.ap-guangzhou.myqcloud.com/md/2025/04/58980534a030786c.png"></p>
<p>最后点击菜单栏中的保存图标，开始生成代码。</p>
<p>若使用 RTOS 会有一个时钟警告，点击 Yes 确认即可。</p>
<p><img alt="image.png" loading="lazy" src="https://jacob-1256058189.cos.ap-guangzhou.myqcloud.com/md/2025/04/f3991d7a82838d85.png"></p>
<h2 id="编写第一份代码">编写第一份代码</h2>
<h3 id="裸机版">裸机版</h3>
<p>在 <code>/Core/Src/main.c</code> 中，找到主函数的大循环，添加：</p>
<p>按下 <code>Alt + /</code> 可以进行代码自动补全。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="cm">/* USER CODE END WHILE */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nf">HAL_GPIO_TogglePin</span><span class="p">(</span><span class="n">LED_GPIO_Port</span><span class="p">,</span> <span class="n">LED_Pin</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nf">HAL_Delay</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="cm">/* USER CODE BEGIN 3 */</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* USER CODE END 3 */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="rtos-版">RTOS 版</h3>
<p>在 RTOS 配置中，添加一个任务</p>
<p><img alt="image.png" loading="lazy" src="https://jacob-1256058189.cos.ap-guangzhou.myqcloud.com/md/2025/04/b1a2632aa7a462f4.png"></p>
<p>在 <code>/Core/Src/freertos.c</code> 中，找到任务函数，添加</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cm">/* USER CODE BEGIN Header_myLEDTask_handle */</span>
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">* @brief Function implementing the myLEDTask thread.
</span></span></span><span class="line"><span class="cl"><span class="cm">* @param argument: Not used
</span></span></span><span class="line"><span class="cl"><span class="cm">* @retval None
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="cm">/* USER CODE END Header_myLEDTask_handle */</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">myLEDTask_handle</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">argument</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* USER CODE BEGIN myLEDTask_handle */</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* Infinite loop */</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span><span class="p">(;;)</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nf">HAL_GPIO_TogglePin</span><span class="p">(</span><span class="n">LED_GPIO_Port</span><span class="p">,</span> <span class="n">LED_Pin</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="nf">osDelay</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* USER CODE END myLEDTask_handle */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="烧录程序到开发版">烧录程序到开发版</h2>
<p>将开发版连接到烧录器上。</p>
<table>
  <thead>
      <tr>
          <th>烧录器</th>
          <th>STM32 (Blue Pill)</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>SWDIO</td>
          <td>PA13 / DIO</td>
      </tr>
      <tr>
          <td>SWCLK</td>
          <td>PA14 / CLK</td>
      </tr>
      <tr>
          <td>GND</td>
          <td>GND</td>
      </tr>
      <tr>
          <td>VCC</td>
          <td>3.3V / 有外部电源则不接</td>
      </tr>
  </tbody>
</table>
<h3 id="添加运行配置">添加运行配置</h3>
<p>菜单选择 <code>运行 - 运行配置</code></p>
<h3 id="st-link">ST-LINK</h3>
<p>若使用 ST-LINK，无需特别配置即可使用。</p>
<p><img alt="image.png" loading="lazy" src="https://jacob-1256058189.cos.ap-guangzhou.myqcloud.com/md/2025/04/7993451e425e9a4e.png"></p>
<h3 id="openocd--dap-link">OpenOCD / DAP-LINK</h3>
<p>若使用其他调试器，如 DAP-LINK 则需要进行手动配置，此处以 PWLink2 Lite 为例。</p>
<p>先按下图进行配置，点击应用后，会在项目路径下生成一个 <code>项目名称 Debug.cfg</code> 文件。</p>
<p><img alt="image.png" loading="lazy" src="https://jacob-1256058189.cos.ap-guangzhou.myqcloud.com/md/2025/04/d109f03cf214855e.png"></p>
<p>点击该 <code>项目名称 Debug.cfg</code> 文件，进行修改：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># This is an genericBoard board with a single STM32F103C8Tx chip</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Generated by STM32CubeIDE</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Take care that such file, as generated, may be overridden without any early notice. Please have a look to debug launch configuration setup(s)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">source</span> <span class="o">[</span>find interface/cmsis-dap.cfg<span class="o">]</span>  <span class="c1"># 修改为 cmsis-dap.cfg</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">set</span> WORKAREASIZE 0x5000
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">transport <span class="k">select</span> swd <span class="c1"># 修改为 swd</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">set</span> CHIPNAME STM32F103C8Tx
</span></span><span class="line"><span class="cl"><span class="nb">set</span> BOARDNAME genericBoard
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Enable debug when in low power modes</span>
</span></span><span class="line"><span class="cl"><span class="nb">set</span> ENABLE_LOW_POWER <span class="m">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Stop Watchdog counters when halt</span>
</span></span><span class="line"><span class="cl"><span class="nb">set</span> STOP_WATCHDOG <span class="m">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># STlink Debug clock frequency</span>
</span></span><span class="line"><span class="cl"><span class="nb">set</span> CLOCK_FREQ <span class="m">8000</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Reset configuration</span>
</span></span><span class="line"><span class="cl"><span class="c1"># use hardware reset, connect under reset</span>
</span></span><span class="line"><span class="cl"><span class="c1"># connect_assert_srst needed if low power mode application running (WFI...)</span>
</span></span><span class="line"><span class="cl">reset_config srst_only srst_nogate connect_assert_srst
</span></span><span class="line"><span class="cl"><span class="nb">set</span> CONNECT_UNDER_RESET <span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="nb">set</span> CORE_RESET <span class="m">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ACCESS PORT NUMBER</span>
</span></span><span class="line"><span class="cl"><span class="nb">set</span> AP_NUM <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="c1"># GDB PORT</span>
</span></span><span class="line"><span class="cl"><span class="nb">set</span> GDB_PORT <span class="m">3333</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># BCTM CPU variables</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">source</span> <span class="o">[</span>find target/stm32f1x.cfg<span class="o">]</span>
</span></span></code></pre></div><p>修改完毕后，回到运行配置，修改该选项，保存即可。</p>
<p><img alt="image.png" loading="lazy" src="https://jacob-1256058189.cos.ap-guangzhou.myqcloud.com/md/2025/04/ab620b88eb408439.png"></p>
<h3 id="编译并下载">编译并下载</h3>
<p>菜单栏中点击🔨锤子图标（构建）进行编译，然后点击绿色播放（运行）将代码写入开发板。部分开发板需要在写入完成后，手动按下重置按钮才会运行新程序。</p>
<h2 id="参考文献">参考文献</h2>
<ul>
<li><a href="https://www.yahboom.com/public/upload/upload-html/1701740971/STM32CubeIDE%E5%AE%89%E8%A3%85-%E4%BD%BF%E7%94%A8.html">STM32CubeIDE 安装 - 使用</a></li>
<li><a href="https://wiki-power.com/CubeMX%E4%B8%8ECubeIDE%E9%81%BF%E5%9D%91/">CubeMX 与 CubeIDE 避坑 - Power&rsquo;s Wiki</a></li>
<li><a href="https://docs.powerwriter.com/docs/faq/powerwriter/base/Debugger/">3.1.7：调试器使用教程 | PowerWriter 文档中心</a></li>
<li><a href="https://www.cnblogs.com/armfly/p/17614371.html">H7-TOOL 的高速 DAPLINK 用于新版 STM32CubeIDE V1.13 及其以上版本的超简单实现方法（2023-08-08） - 硬汉嵌入式 - 博客园</a></li>
<li><a href="https://blog.csdn.net/xddwg521125/article/details/134540203">STM32CubeIDE(CUBE-MX)&mdash;-快速移植 FreeRTOS 实战_stm32cubeide freertos-CSDN 博客</a></li>
<li><a href="https://doc.embedfire.com/mcu/stm32/f103/hal_general/zh/latest/doc/chapter12/chapter12.html">11. GPIO 输出—使用固件库点亮 LED — [野火]STM32 HAL 库开发实战指南——基于 F103 系列开发板 文档</a></li>
<li><a href="https://doc.embedfire.com/linux/stm32mp1/hal/zh/latest/doc/chapter5/chapter5.html">5. 使用 STM32CubeIDE 新建工程 — [野火]STM32MP1-M4 内核 HAL 库开发实战指南——基于 STM32MP157 开发板 文档</a></li>
<li><a href="https://github.com/openocd-org/openocd">GitHub - openocd-org/openocd: Official OpenOCD Read-Only Mirror (no pull requests)</a></li>
<li><a href="https://freertos.org/zh-cn-cmn-s/Documentation/02-Kernel/03-Supported-devices/01-FreeRTOS-porting-guide">新建 FreeRTOS 移植 - FreeRTOS™</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>一种 AI 防疫快速通行及自动追溯辅助数据系统</title>
      <link>https://weixiang.github.io/posts/an-ai-epidemic-prevention-fast-passage-and-automatic-traceability-auxiliary-data-system/</link>
      <pubDate>Sun, 15 May 2022 16:00:00 +0800</pubDate>
      <guid>https://weixiang.github.io/posts/an-ai-epidemic-prevention-fast-passage-and-automatic-traceability-auxiliary-data-system/</guid>
      <description>本项目主要采用了低功耗蓝牙技术，解决在疫情防控常态化背景下，健康码人工查验导致通行效率不佳的问题，并且有数据追溯、记录的功能，能为流行病学调查分析提供依据和有力帮助。</description>
      <content:encoded><![CDATA[<blockquote>
<p>本文为 2022 年校内互联网 + 创业创新大赛的讲稿，在此记录，文章作者为我与 Solitude 同学。</p></blockquote>
<blockquote>
<p>本文禁止转载。</p></blockquote>
<p>各位老师、同学们，大家好。</p>
<p>我们是一支来自 2021 级的两人队伍，我们带来的项目是</p>
<p>一种 AI 防疫快速通行，及自动追溯，辅助数据系统。</p>
<p>本项目主要采用了低功耗蓝牙技术，解决在疫情防控常态化背景下，健康码人工查验导致通行效率不佳的问题，并且有数据追溯、记录的功能，能为流行病学调查分析提供依据和有力帮助。</p>
<p>除此之外，本项目还可以用于其他领域，例如公共场所的人流量统计和身份认证，零售商店的无感支付和快速结算等。</p>
<p>本项目主要分为前端、后端和硬件端三个部分，先带大家简单了解主要特色，稍后我们将在短片中详细讲解与演示。</p>
<p>我们为不同的用户角色，设计了不同的前端交互界面，分为用户端、管理端和公开平台，它们各司其职，精准服务不同职能的用户，更加高效。</p>
<p>后端我们使用了两个云计算平台，分别是百度大脑和 IBM 云，由它们共同协调整个项目的业务逻辑，同时提供人工智能、机器视觉能力的支持。</p>
<p>硬件上，我们使用了来自国货之光乐鑫 ESP32 芯片作为基本节点，采集数据上报到云平台，用非常低的成本，提供了低功耗蓝牙与 Wi-Fi 联网能力。</p>
<p>本项目立项于今年三月，在通过形式验证之后，就着手开始了开发工作，我们两个人分别负责软件和硬件部分，在四月份完成了基本的功能实现，随后经过联合调试，磨合软硬件之间的配合协作。</p>
<p>这是本项目的主要特性和当前两项常用技术方法的对比，本项目补足了现有方法的一些不足之处，配合现有的技术方法，能较好提高防控工作的效率。</p>
<p>本项目的架构主要分为四层，由下自上分别是底层、基础层、业务层和交互层，其中底层和基础层还分为软件层和硬件层，交互层也是分为了管理和用户两层，它们相互配合组成了本项目。</p>
<p>这是本项目所使用的主要技术和特性。</p>
<p>由于本项目开发时采用了局域网部署，现场无法完整演示功能，所以下面请通过短片了解本项目的详情和操作演示。</p>
<p>我们的项目汇报结束，谢谢各位的聆听。</p>
<h2 id="版权声明">版权声明</h2>
<p>本文由 <a href="https://weixiang.github.io">Jacob</a> 采用独家许可，禁止转载、演绎，仅限于 <a href="https://weixiang.github.io">weixiang.github.io</a> 发布。</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
