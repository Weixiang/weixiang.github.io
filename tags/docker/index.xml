<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Docker on Jacob's Thoughts</title><link>https://weixiang.github.io/tags/docker/</link><description>Recent content in Docker on Jacob's Thoughts</description><generator>Hugo -- 0.131.0</generator><language>zh</language><copyright>2017-2024 Jacob&amp;rsquo;s Thoughts</copyright><lastBuildDate>Tue, 06 Feb 2024 11:06:34 +0800</lastBuildDate><atom:link href="https://weixiang.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>为 Docker 配置 IPv6</title><link>https://weixiang.github.io/posts/configure-ipv6-for-docker/</link><pubDate>Tue, 06 Feb 2024 11:06:34 +0800</pubDate><guid>https://weixiang.github.io/posts/configure-ipv6-for-docker/</guid><description>随着 IPv6 的普及，Docker 也要上 IPv6！网际协议第 6 版是网际协议的最新版本，用作互联网的协议。用它来取代 IPv4 主要是为了解决 IPv4 地址枯竭问题，同时它也在其他方面对于 IPv4 有许多改进。</description><content:encoded><![CDATA[<h2 id="添加配置">添加配置</h2>
<p>编辑配置</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">nano /etc/docker/daemon.json
</span></span></code></pre></div><p>添加</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;ipv6&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;fixed-cidr-v6&#34;</span><span class="p">:</span> <span class="s2">&#34;fd00::/80&#34;</span><span class="p">,</span>  <span class="err">#</span> <span class="err">IPv6前缀可以自定义，请确保符合规则</span> 
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;experimental&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;ip6tables&#34;</span><span class="p">:</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>重启 Docker</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">systemctl restart docker
</span></span></code></pre></div><h2 id="检查">检查</h2>
<p>查看 docker 网络 IPv6 状态</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker network inspect bridge
</span></span></code></pre></div><p>测试网络状态</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker run --rm -it busybox ping -6 -c4 www.google.com
</span></span></code></pre></div><h2 id="qbittorrent-使用示例">qBittorrent 使用示例</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;2&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">qbittorrent</span><span class="p">:</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">linuxserver/qbittorrent:4.4.1    </span><span class="w"> </span><span class="c"># 之前很多小伙伴反馈默认 latest 版本会出现 rss 功能无法使用的情况，这边咕咕还是建议大家选择一个特定的版本（一般 PT 站点貌似也会推荐特定版本）</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">qbittorrent</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">PUID=1000</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">PGID=1000</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">TZ=Asia/Shanghai</span><span class="w"> </span><span class="c"># 你的时区</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">UMASK_SET=022</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">WEBUI_PORT=8081</span><span class="w"> </span><span class="c"># 将此处修改成你欲使用的 WEB 管理平台端口 </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">/root/data/docker_data/qBittorrent/config:/config</span><span class="w"> </span><span class="c"># 绝对路径请修改为自己的 config 文件夹</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">/root/data/docker_data/qBittorrent/downloads:/downloads</span><span class="w"> </span><span class="c"># 绝对路径请修改为自己的 downloads 文件夹</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># 要使用的映射下载端口与内部下载端口，可保持默认，安装完成后在管理页面仍然可以改成其他端口。</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="m">6881</span><span class="p">:</span><span class="m">6881</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="m">6881</span><span class="p">:</span><span class="m">6881</span><span class="l">/udp</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># 此处 WEB UI 目标端口与内部端口务必保证相同，见问题 1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="m">8081</span><span class="p">:</span><span class="m">8081</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="l">unless-stopped</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">network_mode</span><span class="p">:</span><span class="w"> </span><span class="l">bridge      </span><span class="w"> </span><span class="c"># 网络模式选择刚才配置的桥接 bridge</span><span class="w">
</span></span></span></code></pre></div><p>进入容器测试</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker <span class="nb">exec</span> qbittorrent ping6 -c4 youtube.com
</span></span></code></pre></div><h2 id="参考文献">参考文献</h2>
<p><a href="https://blog.laoda.de/archives/docker-qbittorrent-ipv6/">https://blog.laoda.de/archives/docker-qbittorrent-ipv6/</a></p>
]]></content:encoded></item><item><title>使用 Docker 部署 File Browser</title><link>https://weixiang.github.io/posts/deploy-file-browser-using-docker/</link><pubDate>Tue, 26 Dec 2023 09:47:30 +0800</pubDate><guid>https://weixiang.github.io/posts/deploy-file-browser-using-docker/</guid><description>filebrowser 是一个使用 go 语言编写的软件，功能是可以通过浏览器对服务器上的文件进行管理。可以是修改文件，或者是添加删除文件，甚至可以分享文件，是一个很棒的文件管理器，你甚至可以当成一个网盘来使用。总之使用非常简单方便，功能很强大。</description><content:encoded><![CDATA[<h2 id="创建配置">创建配置</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">touch /volume1/docker/filebrowser/.filebrowser.json
</span></span><span class="line"><span class="cl">touch /volume1/docker/filebrowser/filebrowser.db
</span></span></code></pre></div><p>编辑配置</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">nano /volume1/docker/filebrowser/.filebrowser.json
</span></span></code></pre></div><p>填入</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;port&#34;</span>: 80,
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;baseURL&#34;</span>: <span class="s2">&#34;&#34;</span>,
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;address&#34;</span>: <span class="s2">&#34;&#34;</span>,
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;log&#34;</span>: <span class="s2">&#34;stdout&#34;</span>,
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;database&#34;</span>: <span class="s2">&#34;/database/filebrowser.db&#34;</span>,
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;root&#34;</span>: <span class="s2">&#34;/srv&#34;</span>,
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;locale&#34;</span>: <span class="s2">&#34;zh-cn&#34;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>默认配置参考：<a href="https://github.com/filebrowser/filebrowser/blob/master/docker/root/defaults/settings.json">https://github.com/filebrowser/filebrowser/blob/master/docker/root/defaults/settings.json</a></p>
<h2 id="启动容器">启动容器</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker run <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v /volume1:/srv <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v /volume1/docker/filebrowser/filebrowser.db:/database.db <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v /volume1/docker/filebrowser/.filebrowser.json:/.filebrowser.json <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -u <span class="k">$(</span>id -u<span class="k">)</span>:<span class="k">$(</span>id -g<span class="k">)</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -p 8980:80 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    filebrowser/filebrowser
</span></span></code></pre></div><p>默认账号密码：<code>admin</code></p>
<h2 id="参考文献">参考文献</h2>
<p><a href="https://filebrowser.org/installation">https://filebrowser.org/installation</a></p>
<p><a href="https://www.iszy.cc/posts/filebrowser2-setup-docker/">https://www.iszy.cc/posts/filebrowser2-setup-docker/</a></p>
<p><a href="https://blog.csdn.net/CAIYUNFREEDOM/article/details/93972504">https://blog.csdn.net/CAIYUNFREEDOM/article/details/93972504</a></p>
]]></content:encoded></item><item><title>PVE LXC Debian 12 容器换源与安装 Docker</title><link>https://weixiang.github.io/posts/pve-lxc-debian-12-container-source-change-and-installation-docker/</link><pubDate>Tue, 26 Dec 2023 09:17:12 +0800</pubDate><guid>https://weixiang.github.io/posts/pve-lxc-debian-12-container-source-change-and-installation-docker/</guid><description>本文记录了 PVE LXC Debian 12 容器环境下 Docker 的换源与安装，包含代理设置等本地特色内容，Docker 是一个开放源代码的开放平台软件，用于开发应用、交付应用和运行应用。</description><content:encoded><![CDATA[<h2 id="创建-lxc">创建 LXC</h2>
<p>创建容器时<strong>取消勾选无特权容器！</strong></p>
<p>创建容器时<strong>取消勾选无特权容器！</strong></p>
<p>创建容器时<strong>取消勾选无特权容器！</strong></p>
<p>创建完毕后在 PVE Host 内执行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">cat &gt;&gt; /etc/pve/lxc/<span class="o">[</span>LXC_ID<span class="o">]</span>.conf <span class="s">&lt;&lt; EOL
</span></span></span><span class="line"><span class="cl"><span class="s">lxc.apparmor.profile: unconfined
</span></span></span><span class="line"><span class="cl"><span class="s">EOL</span>
</span></span></code></pre></div><h2 id="换源">换源</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sed -i <span class="s1">&#39;s/deb.debian.org/mirrors.ustc.edu.cn/g&#39;</span> /etc/apt/sources.list
</span></span><span class="line"><span class="cl">sed -i <span class="s1">&#39;s/deb.debian.org/mirrors.ustc.edu.cn/g&#39;</span> /etc/apt/sources.list.d/debian.sources
</span></span><span class="line"><span class="cl">sed -i <span class="s1">&#39;s|security.debian.org/debian-security|mirrors.ustc.edu.cn/debian-security|g&#39;</span> /etc/apt/sources.list
</span></span></code></pre></div><p>更新</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">apt update <span class="o">&amp;&amp;</span> apt upgrade -y
</span></span></code></pre></div><h2 id="魔法">魔法</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nv">HTTP_PROXY</span><span class="o">=</span>http://192.168.1.5:7890/
</span></span><span class="line"><span class="cl"><span class="nv">HTTPS_PROXY</span><span class="o">=</span>http://192.168.1.5:7890/
</span></span><span class="line"><span class="cl"><span class="nv">NO_PROXY</span><span class="o">=</span>localhost,192.168.1.5,.example.com
</span></span></code></pre></div><h2 id="安装-docker">安装 Docker</h2>
<p>安装 Docker</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">apt install curl -y
</span></span><span class="line"><span class="cl">curl -sSL https://get.daocloud.io/docker <span class="p">|</span> sh
</span></span></code></pre></div><h2 id="设置镜像源和容器网段">设置镜像源和容器网段</h2>
<p>编辑<code>daemon.json</code>文件</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">nano /etc/docker/daemon.json
</span></span></code></pre></div><p>填入</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="nt">&#34;registry-mirrors&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;https://docker.mirrors.ustc.edu.cn&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;https://hub-mirror.c.163.com&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;bip&#34;</span><span class="p">:</span> <span class="s2">&#34;192.168.10.1/24&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>重启 Docker 生效</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">systemctl restart docker
</span></span></code></pre></div><h2 id="安装-portainer-ce">安装 Portainer CE</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run -d -p 8000:8000 -p 9443:9443 --name portainer --restart<span class="o">=</span>always -v /var/run/docker.sock:/var/run/docker.sock -v /volume1/docker/portainer:/data portainer/portainer-ce:latest
</span></span></code></pre></div><h2 id="参考文献">参考文献</h2>
<p><a href="https://ihnic.com/index.php/archives/12/">https://ihnic.com/index.php/archives/12/</a></p>
<p><a href="https://docs.portainer.io/start/install-ce/server/docker/linux">https://docs.portainer.io/start/install-ce/server/docker/linux</a></p>
<p><a href="https://mirrors.ustc.edu.cn/help/debian.html">https://mirrors.ustc.edu.cn/help/debian.html</a></p>
]]></content:encoded></item><item><title>HomeLab 搭建笔记</title><link>https://weixiang.github.io/posts/homelab-deployment-record/</link><pubDate>Thu, 27 Jul 2023 13:12:04 +0800</pubDate><guid>https://weixiang.github.io/posts/homelab-deployment-record/</guid><description>Homelab 是指可在家中搭建的实验（折腾）环境，用于进行实验和学习。本文记录了一次 HomeLab 的搭建过程，包含多个服务的配置，主要使用 Docker 和群晖 DSM 构成。</description><content:encoded><![CDATA[<h2 id="adguard-home">AdGuard Home</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run --name adguardhome<span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --restart unless-stopped<span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --network host<span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v /volume1/docker/adguardhome/work:/opt/adguardhome/work<span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v /volume1/docker/adguardhome/conf:/opt/adguardhome/conf<span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -d adguard/adguardhome
</span></span></code></pre></div><p>或者</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run --name adguardhome<span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --restart unless-stopped<span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v /volume1/docker/adguardhome/work:/opt/adguardhome/work<span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v /volume1/docker/adguardhome/conf:/opt/adguardhome/conf<span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -p 53:53/tcp -p 53:53/udp<span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -p 67:67/udp -p 68:68/udp<span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -p 80:80/tcp -p 443:443/tcp -p 443:443/udp -p 3000:3000/tcp<span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -p 853:853/tcp<span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -p 784:784/udp -p 853:853/udp -p 8853:8853/udp<span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -p 5443:5443/tcp -p 5443:5443/udp<span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -d adguard/adguardhome
</span></span></code></pre></div><p>添加过滤列表</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">https://ghproxy.com/https://raw.githubusercontent.com/217heidai/adblockfilters/main/rules/adblockfilters.txt
</span></span></code></pre></div><h2 id="clash--yacd">Clash &amp; Yacd</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run --name clash<span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --restart unless-stopped<span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --network host<span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v /volume1/docker/clash:/root/.config/clash<span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -d dreamacro/clash
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run --name yacd<span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --restart unless-stopped<span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -p 7891:80<span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -d haishanh/yacd
</span></span></code></pre></div><h2 id="home-assistant">Home Assistant</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run -d <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --name homeassistant <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --privileged <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --restart<span class="o">=</span>unless-stopped <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -e <span class="nv">TZ</span><span class="o">=</span>Asia/Shanghai <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -v /volume1/docker/homeassistant:/config <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --network<span class="o">=</span>host <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  ghcr.io/home-assistant/home-assistant:stable
</span></span></code></pre></div><p>更新</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># if this returns &#34;Image is up to date&#34; then you can stop here</span>
</span></span><span class="line"><span class="cl">docker pull ghcr.io/home-assistant/home-assistant:stable
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># stop the running container</span>
</span></span><span class="line"><span class="cl">docker stop homeassistant
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># remove it from Docker&#39;s list of containers</span>
</span></span><span class="line"><span class="cl">docker rm homeassistant
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># finally, start a new one</span>
</span></span><span class="line"><span class="cl">docker run -d <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --name homeassistant <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --restart<span class="o">=</span>unless-stopped <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --privileged <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -e <span class="nv">TZ</span><span class="o">=</span>Asia/Shanghai <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -v /volume1/docker/homeassistant:/config <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --network<span class="o">=</span>host <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  ghcr.io/home-assistant/home-assistant:stable
</span></span></code></pre></div><h2 id="esphome">ESPHome</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run -d <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --name esphome <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --privileged <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --restart<span class="o">=</span>unless-stopped <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -e <span class="nv">TZ</span><span class="o">=</span>Asia/Shanghai <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -v /volume1/docker/esphome:/config <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --network<span class="o">=</span>host <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  ghcr.io/esphome/esphome
</span></span></code></pre></div><h2 id="青龙面板">青龙面板</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run -dit <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -v /volume1/docker/qinglong:/ql/data <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -p 5700:5700 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --name qinglong <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --hostname qinglong <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --restart unless-stopped <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  whyour/qinglong:latest
</span></span></code></pre></div><p>安装依赖</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -fsSL https://ghproxy.com/https://raw.githubusercontent.com/shufflewzc/QLDependency/main/Shell/QLOneKeyDependency.sh <span class="p">|</span> sh
</span></span></code></pre></div><h2 id="heimdall">Heimdall</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run -d <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --name<span class="o">=</span>heimdall <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -e <span class="nv">PUID</span><span class="o">=</span><span class="m">1000</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -e <span class="nv">PGID</span><span class="o">=</span><span class="m">1000</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -e <span class="nv">TZ</span><span class="o">=</span>Asia/Shanghai <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -p 8080:80 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -p 8443:443 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -v /volume1/docker/heimdall:/config <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --restart unless-stopped <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  lscr.io/linuxserver/heimdall:latest
</span></span></code></pre></div><h2 id="xray">Xray</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run -d -p 9000:9000 --name xray --restart<span class="o">=</span>unless-stopped -v /volume1/docker/xray:/etc/xray teddysun/xray
</span></span></code></pre></div><h2 id="nodered">NodeRED</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run -it -p 1880:1880 -v /volume1/docker/NodeRED:/data --name mynodered nodered/node-red
</span></span></code></pre></div><h2 id="chinesesubfinder">ChineseSubFinder</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;3&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">chinesesubfinder</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">allanpk716/ChineseSubFinder:latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">/volume1/docker/chinesesubfinder/config:/config </span><span class="w"> </span><span class="c"># 冒号左边请修改为你想在主机上保存配置、日志等文件的路径</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">/volume1/video:/media   </span><span class="w"> </span><span class="c"># 请修改为你的媒体目录，冒号右边可以改成你方便记忆的目录，多个媒体目录需要分别映射进来</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">/volume1/docker/chinesesubfinder/browser:/root/.cache/rod/browser   </span><span class="w"> </span><span class="c"># 容器重启后无需再次下载 chrome，除非 go-rod 更新</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">PUID=1026        </span><span class="w"> </span><span class="c"># uid</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">PGID=100         </span><span class="w"> </span><span class="c"># gid</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">PERMS=true       </span><span class="w"> </span><span class="c"># 是否重设/media 权限</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">TZ=Asia/Shanghai </span><span class="w"> </span><span class="c"># 时区</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">UMASK=022        </span><span class="w"> </span><span class="c"># 权限掩码</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="l">unless-stopped</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">network_mode</span><span class="p">:</span><span class="w"> </span><span class="l">bridge</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">hostname</span><span class="p">:</span><span class="w"> </span><span class="l">chinesesubfinder</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">chinesesubfinder</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="m">19035</span><span class="p">:</span><span class="m">19035</span><span class="w">  </span><span class="c"># 从 0.20.0 版本开始，通过 webui 来设置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="m">19037</span><span class="p">:</span><span class="m">19037</span><span class="w">  </span><span class="c"># webui 的视频列表读取图片用，务必设置不要暴露到外网</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">logging</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">driver</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;json-file&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">options</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">max-size</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;100m&#34;</span><span class="w"> </span><span class="c"># 限制 docker 控制台日志大小，可自行调整</span><span class="w">
</span></span></span></code></pre></div>]]></content:encoded></item><item><title>使用 SakuraFrp 内网穿透 DSM</title><link>https://weixiang.github.io/posts/use-sakurafrp-to-penetrate-dsm-through-the-intranet/</link><pubDate>Wed, 19 Jul 2023 16:19:16 +0800</pubDate><guid>https://weixiang.github.io/posts/use-sakurafrp-to-penetrate-dsm-through-the-intranet/</guid><description>使用 SakuraFrp 内网穿透 DSM 和 HomeAssistant。SakuraFrp 是免费的内网穿透服务。SakuraFrp 是由 KasuganoSora 开发、维护的一个共享内网穿透管理平台，长期提供免费的内网穿透服务。</description><content:encoded><![CDATA[<h2 id="docker-部署-sakurafrp-客户端">Docker 部署 SakuraFrp 客户端</h2>
<p>参考官方文档：<a href="https://doc.natfrp.com/app/synology.html">https://doc.natfrp.com/app/synology.html</a></p>
<ol>
<li>安装 Docker 套件</li>
<li>拉取镜像：<strong>natfrp/frpc</strong></li>
<li>在打开 Docker 套件的 <strong>网络</strong> 页面，查看 <code>bridge</code> 网络的 <strong>子网</strong>，把 <strong>最后一个</strong> <code>0</code> 换成 <code>1</code> 作为 <strong>本地 IP</strong>。举个例子，子网 <code>172.17.0.0/16</code> 对应的 <strong>本地 IP</strong> 就是 <code>172.17.0.1</code>。</li>
<li>前往 Sakura Frp 管理面板使用之前获取到的信息创建一条 <strong>TCP 隧道</strong>，本地 IP 填写上面获取到的 IP，例如<code>172.17.0.1</code>，端口选择 5001，即 DSM 的 HTTPS 端口。</li>
<li>在隧道列表中点击刚才创建的隧道右边三个点，选择 <strong>配置文件</strong> 并在弹出的对话框中复制隧道的 <strong>启动参数</strong>，类似于这样的<code>-f 6i862oypc561ipo5ku9uz895o40jh73:7605087</code>。</li>
<li>新建容器，镜像选择<strong>natfrp/frpc</strong>，选择开机自启。</li>
<li>转到 <strong>环境</strong> 标签，在 <strong>命令</strong> 处粘贴 <strong>启动参数</strong>，然后点击上面的 <strong>新增</strong> 按钮分别填写 <code>LANG</code> 和 <code>en_US.UTF-8</code></li>
<li>启动后可以在日志中看到访问 URL。</li>
</ol>
<h2 id="启动多个隧道">启动多个隧道</h2>
<p>使用以下参数即可启动多个隧道，参考 <a href="https://doc.natfrp.com/faq/frpc.html">https://doc.natfrp.com/faq/frpc.html</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">-f &lt;访问密钥&gt;:&lt;隧道ID&gt;,&lt;另外一个隧道ID&gt;,&lt;更多隧道ID&gt;,n&lt;节点ID&gt;,n&lt;另外一个节点ID&gt;,...
</span></span></code></pre></div><p>例如</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">-f 6i862oypc561ipo5ku9uz895o40jh73:7605087,7605086,7605085
</span></span></code></pre></div><h2 id="ssl-证书配置">SSL 证书配置</h2>
<blockquote>
<p>官方文档有说明：<a href="https://doc.natfrp.com/frpc/ssl.html">https://doc.natfrp.com/frpc/ssl.html</a></p>
</blockquote>
<p>但尝试过后发现无法使用，原因未知（浪费 5 个小时</p>
<p>最后使用 DSM 自带的反向代理解决。</p>
<p>首先，准备一个域名，使用 CNAME 解析到 SakuraFrp 的节点地址，参考 <a href="https://doc.natfrp.com/app/http.html#setup-dns">https://doc.natfrp.com/app/http.html#setup-dns</a></p>
<p>接着给域名申请一个 SSL 证书，格式选择 Nginx，下载保存。</p>
<h3 id="dsm">DSM</h3>
<p>直接在 DSM 的安全设置中，选择添加证书，选择刚刚自己申请的证书，并且设为默认证书，替代原有自签证书即可。</p>
<p>SakuraFrp 面板穿透配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">本地 IP：172.17.0.1  # 根据自己 Docker 网卡设置
</span></span><span class="line"><span class="cl">本地端口：5001
</span></span><span class="line"><span class="cl">自动 HTTPS：禁用
</span></span></code></pre></div><p>就可以使用<code>https://自己域名地址:穿透后端口号</code>访问了。</p>
<h3 id="home-assistant">Home Assistant</h3>
<p>在 DSM 的登录门户设置中，选择高级 - 反向代理服务器，添加一个反向代理。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">来源：
</span></span><span class="line"><span class="cl">协议：HTTPS
</span></span><span class="line"><span class="cl">主机名：*
</span></span><span class="line"><span class="cl">端口：8124
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">目的地：
</span></span><span class="line"><span class="cl">协议：HTTP
</span></span><span class="line"><span class="cl">主机名：127.0.0.1
</span></span><span class="line"><span class="cl">端口：8123
</span></span></code></pre></div><p>SakuraFrp 面板穿透配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">本地 IP：172.17.0.1  # 根据自己 Docker 网卡设置
</span></span><span class="line"><span class="cl">本地端口：8124
</span></span><span class="line"><span class="cl">自动 HTTPS：禁用
</span></span></code></pre></div><p>Home Assistant App 配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">内部 URL：http://NAS 局域网 IP 地址:8123
</span></span><span class="line"><span class="cl">外部 URL：https://自己域名地址：穿透后端口号
</span></span></code></pre></div><h2 id="参考文献">参考文献</h2>
<p><a href="https://doc.natfrp.com/app/synology.html">https://doc.natfrp.com/app/synology.html</a></p>
]]></content:encoded></item><item><title>群晖部署青龙面板</title><link>https://weixiang.github.io/posts/synology-deploys-qinglong-panel/</link><pubDate>Wed, 19 Jul 2023 16:18:18 +0800</pubDate><guid>https://weixiang.github.io/posts/synology-deploys-qinglong-panel/</guid><description>本文记录在群晖 DSM 上使用 Docker 部署青龙面板。青龙，又名苍龙，在中国传统文化中是四象之一、天之四灵之一。青龙面板是支持 Python3、JavaScript、Shell、Typescript 的定时任务管理平台</description><content:encoded><![CDATA[<h2 id="启动容器">启动容器</h2>
<p>Docker 镜像可能更新有延迟，可以通过将 <code>latest</code> 替换为版本号，来指定拉取最新版本。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run -dit <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>-v <span class="nv">$PWD</span>/ql/config:/ql/config <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>-v <span class="nv">$PWD</span>/ql/log:/ql/log <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>-v <span class="nv">$PWD</span>/ql/db:/ql/db <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>-p 5600:5600 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--name qinglong <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--hostname qinglong <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--restart always <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>whyour/qinglong:latest
</span></span></code></pre></div><p>指定版本</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run -dit <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>-v <span class="nv">$PWD</span>/ql/config:/ql/config <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>-v <span class="nv">$PWD</span>/ql/log:/ql/log <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>-v <span class="nv">$PWD</span>/ql/db:/ql/db <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>-p 5600:5600 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--name qinglong <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--hostname qinglong <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--restart always <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>whyour/qinglong:2.15.1
</span></span></code></pre></div><h2 id="修改配置文件">修改配置文件</h2>
<p>修改 <code>config.sh</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1">## 代理地址，支持HTTP/SOCK5，例如 http://127.0.0.1:7890</span>
</span></span><span class="line"><span class="cl"><span class="nv">ProxyUrl</span><span class="o">=</span><span class="s2">&#34;http://192.168.31.166:7890&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">## 3. Telegram</span>
</span></span><span class="line"><span class="cl"><span class="c1">## 下方填写自己申请@BotFather的Token，如10xxx4:AAFcqxxxxgER5uw</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">TG_BOT_TOKEN</span><span class="o">=</span><span class="s2">&#34;**********:******************************&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1">## 下方填写 @getuseridbot 中获取到的纯数字ID</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">TG_USER_ID</span><span class="o">=</span><span class="s2">&#34;**********&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1">## Telegram 代理IP（选填）</span>
</span></span><span class="line"><span class="cl"><span class="c1">## 下方填写代理IP地址，代理类型为 http，比如您代理是 http://127.0.0.1:1080，则填写 &#34;127.0.0.1&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1">## 如需使用，请自行解除下一行的注释</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">TG_PROXY_HOST</span><span class="o">=</span><span class="s2">&#34;192.168.31.166&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1">## Telegram 代理端口（选填）</span>
</span></span><span class="line"><span class="cl"><span class="c1">## 下方填写代理端口号，代理类型为 http，比如您代理是 http://127.0.0.1:1080，则填写 &#34;1080&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1">## 如需使用，请自行解除下一行的注释</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">TG_PROXY_PORT</span><span class="o">=</span><span class="s2">&#34;7890&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">## ql repo命令拉取脚本时需要拉取的文件后缀，直接写文件后缀名即可</span>
</span></span><span class="line"><span class="cl"><span class="nv">RepoFileExtensions</span><span class="o">=</span><span class="s2">&#34;js py sh&#34;</span>
</span></span></code></pre></div><h2 id="安装常用依赖">安装常用依赖</h2>
<p>进入容器执行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -fsSL https://ghproxy.com/https://raw.githubusercontent.com/FlechazoPh/QLDependency/main/Shell/QLOneKeyDependency.sh <span class="p">|</span> sh
</span></span></code></pre></div><p>完成后重启容器</p>
<h2 id="开始使用">开始使用</h2>
<h3 id="京东">京东</h3>
<h4 id="拉取脚本">拉取脚本</h4>
<p>任务定时建议 <code>50 7-23/2 * * *</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># KingRan/KR（集合库）</span>
</span></span><span class="line"><span class="cl">ql repo https://github.com/KingRan/KR.git <span class="s2">&#34;jd_|jx_|jdCookie&#34;</span> <span class="s2">&#34;activity|backUp&#34;</span> <span class="s2">&#34;^jd[^_]|USER|utils|function|sign|sendNotify|ql|JDJR&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 6dylan6/jdpro（集合库）</span>
</span></span><span class="line"><span class="cl">ql repo https://github.com/6dylan6/jdpro.git <span class="s2">&#34;jd_|jx_|jddj_&#34;</span> <span class="s2">&#34;backUp&#34;</span> <span class="s2">&#34;^jd[^_]|USER|JD|function|sendNotify&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># gys619/Absinthe（集合库）</span>
</span></span><span class="line"><span class="cl">ql repo https://github.com/gys619/Absinthe.git <span class="s2">&#34;jd_|jx_|jddj_|gua_|getJDCookie|wskey&#34;</span> <span class="s2">&#34;activity|backUp&#34;</span> <span class="s2">&#34;^jd[^_]|USER|utils|ZooFaker_Necklace|JDJRValidator_|sign_graphics_validate|jddj_cookie|function|ql|magic|JDJR|JD&#34;</span> <span class="s2">&#34;main&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># zero205/JD_tencent_scf</span>
</span></span><span class="line"><span class="cl">ql repo https://github.com/zero205/JD_tencent_scf.git <span class="s2">&#34;jd_|jx_|jdCookie&#34;</span> <span class="s2">&#34;backUp|icon&#34;</span> <span class="s2">&#34;^jd[^_]|USER|sendNotify|sign_graphics_validate|JDJR|JDSign|ql&#34;</span> <span class="s2">&#34;main&#34;</span>
</span></span></code></pre></div><h4 id="获取-cookie">获取 Cookie</h4>
<p>前往京东手机版登录 <a href="https://m.jd.com">https://m.jd.com</a></p>
<p>使用开发者工具查看 Network 即可获取到 Cookie：</p>
<p>其中只需要 <code>pt_key</code> 与 <code>pt_pin</code> 两个，分号不可少：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">pt_key=AAJjiW4IADB_2Pgyapctjm8mnz3OvE8Jv-****************************************; pt_pin=**********;
</span></span></code></pre></div><p>将其添加到环境变量，命名为 <code>JD_COOKIE</code></p>
<h3 id="b-站">B 站</h3>
<h4 id="安装环境">安装环境</h4>
<p>进入容器执行，完成后重启容器</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 安装 dotnet 环境</span>
</span></span><span class="line"><span class="cl">curl -sSL https://ghproxy.com/https://raw.githubusercontent.com/RayWangQvQ/BiliBiliToolPro/main/qinglong/ray-dotnet-install.sh <span class="p">|</span> bash /dev/stdin
</span></span></code></pre></div><h4 id="拉取脚本-1">拉取脚本</h4>
<p>添加订阅</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">名称：Bilibili
</span></span><span class="line"><span class="cl">类型：公开仓库
</span></span><span class="line"><span class="cl">链接：https://github.com/RayWangQvQ/BiliBiliToolPro.git
</span></span><span class="line"><span class="cl">定时类型：crontab
</span></span><span class="line"><span class="cl">定时规则：2 2 28 * *
</span></span><span class="line"><span class="cl">白名单：bili_task_.+\.sh
</span></span><span class="line"><span class="cl">文件后缀：sh
</span></span></code></pre></div><h4 id="获取-cookie-1">获取 Cookie</h4>
<p>使用 <strong>隐私窗口</strong> 登录 B 站，后打开 <a href="https://api.bilibili.com/x/web-interface/nav">https://api.bilibili.com/x/web-interface/nav</a> 获取 Cookie</p>
<p>保存到环境变量，命名为 <code>Ray_BiliBiliCookies__1</code></p>
<h4 id="配置推送">配置推送</h4>
<p>Telegram：添加以下环境变量</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">Ray_Serilog__WriteTo__3__Args__botToken
</span></span><span class="line"><span class="cl">Ray_Serilog__WriteTo__3__Args__chatId
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Ray_Serilog__WriteTo__3__Args__proxy
</span></span><span class="line"><span class="cl"># 代理格式为 user:password@host:port
</span></span></code></pre></div><h3 id="原神国际版">原神国际版</h3>
<h4 id="拉取脚本-2">拉取脚本</h4>
<p>订阅添加</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">地址：https://github.com/Ethiner/hoyolab_daily_login
</span></span><span class="line"><span class="cl">文件后缀：py
</span></span></code></pre></div><h4 id="获取-cookie-2">获取 Cookie</h4>
<p>打开 <a href="http://hoyolab.com/">http://hoyolab.com/</a> 登录获取</p>
<p>其中只用到</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">ltoken=dTpY78eoKW5SbvLocxdI33********************; ltuid=**********;
</span></span></code></pre></div><p>分别填入环境变量，名为 <code>LTOKEN</code> 和 <code>LTUID</code></p>
<h2 id="参考文献">参考文献</h2>
<p><a href="https://www.dujin.org/18884.html">https://www.dujin.org/18884.html</a></p>
<p><a href="https://github.com/RayWangQvQ/BiliBiliToolPro">https://github.com/RayWangQvQ/BiliBiliToolPro</a></p>
<p><a href="https://github.com/FlechazoPh/QLDependency">https://github.com/FlechazoPh/QLDependency</a></p>
<p><a href="https://github.com/Ethiner/hoyolab_daily_login">https://github.com/Ethiner/hoyolab_daily_login</a></p>
]]></content:encoded></item></channel></rss>