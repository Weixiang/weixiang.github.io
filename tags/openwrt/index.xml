<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>OpenWRT on Jacob's Thoughts</title><link>https://weixiang.github.io/tags/openwrt/</link><description>Recent content in OpenWRT on Jacob's Thoughts</description><generator>Hugo -- 0.132.1</generator><language>zh</language><copyright>©2017-2024 Jacob&amp;rsquo;s Thoughts</copyright><lastBuildDate>Wed, 19 Jul 2023 16:31:53 +0800</lastBuildDate><atom:link href="https://weixiang.github.io/tags/openwrt/index.xml" rel="self" type="application/rss+xml"/><item><title>为红米 AX6S 编译 X-Wrt</title><link>https://weixiang.github.io/posts/compile-x-wrt-for-redmi-ax6s/</link><pubDate>Wed, 19 Jul 2023 16:31:53 +0800</pubDate><guid>https://weixiang.github.io/posts/compile-x-wrt-for-redmi-ax6s/</guid><description>以红米 AX6S 为例，编译一个带 OpenClash 的 X-Wrt。OpenClash 插件是一个可运行在 OpenWrt 上的 Clash 客户端，兼容 Shadowsocks、ShadowsocksR、Vmess、Trojan、Snell 等协议，根据灵活的规则配置实现策略代理。</description><content:encoded><![CDATA[<p>以红米 AX6S 为例，编译一个带 OpenClash 的 X-Wrt</p>
<h2 id="路由器准备">路由器准备</h2>
<h3 id="解锁-telnet">解锁 Telnet</h3>
<p>进入小米路由器后台<code>192.168.31.1</code>，通过固件升级，刷入开发版固件 <a href="https://www.right.com.cn/forum/thread-8173581-1-1.html">https://www.right.com.cn/forum/thread-8173581-1-1.html</a></p>
<h3 id="计算-root-密码">计算 root 密码</h3>
<p>通过 SN 码在 <a href="https://www.oxygen7.cn/miwifi/">https://www.oxygen7.cn/miwifi/</a> 计算出密码。</p>
<h3 id="解锁-ssh">解锁 SSH</h3>
<p>通过 Telnet 连接到路由器，账号为<code>root</code>，密码为上一步得到的结果。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">telnet</span> <span class="mf">192.168</span><span class="p">.</span><span class="py">31</span><span class="p">.</span><span class="py">1</span>
</span></span></code></pre></div><p>通过命令解锁 SSH</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">nvram <span class="nb">set</span> <span class="nv">ssh_en</span><span class="o">=</span><span class="m">1</span> <span class="p">&amp;</span> nvram <span class="nb">set</span> <span class="nv">uart_en</span><span class="o">=</span><span class="m">1</span> <span class="p">&amp;</span> nvram <span class="nb">set</span> <span class="nv">boot_wait</span><span class="o">=</span>on <span class="p">&amp;</span> nvram <span class="nb">set</span> <span class="nv">bootdelay</span><span class="o">=</span><span class="m">3</span> <span class="p">&amp;</span> nvram <span class="nb">set</span> <span class="nv">flag_try_sys1_failed</span><span class="o">=</span><span class="m">0</span> <span class="p">&amp;</span> nvram <span class="nb">set</span> <span class="nv">flag_try_sys2_failed</span><span class="o">=</span><span class="m">1</span>
</span></span><span class="line"><span class="cl">nvram <span class="nb">set</span> <span class="nv">flag_boot_rootfs</span><span class="o">=</span><span class="m">0</span> <span class="p">&amp;</span> nvram <span class="nb">set</span> <span class="s2">&#34;boot_fw1=run boot_rd_img;bootm&#34;</span>
</span></span><span class="line"><span class="cl">nvram <span class="nb">set</span> <span class="nv">flag_boot_success</span><span class="o">=</span><span class="m">1</span> <span class="p">&amp;</span> nvram commit <span class="p">&amp;</span> /etc/init.d/dropbear <span class="nb">enable</span> <span class="p">&amp;</span> /etc/init.d/dropbear start
</span></span></code></pre></div><p>SSH 连接到路由器</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">ssh</span> <span class="n">root</span><span class="nv">@192</span><span class="p">.</span><span class="py">168</span><span class="p">.</span><span class="py">31</span><span class="p">.</span><span class="py">1</span>
</span></span></code></pre></div><p>刷写 OpenWrt 自定义固件，其中<code>/tmp/factory.bin</code>替换为需要刷写的固件路径。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mtd -r write /tmp/factory.bin firmware
</span></span></code></pre></div><h2 id="编译固件">编译固件</h2>
<p>X-Wrt 是一个面向普通用户的路由系统，它基于 OpenWrt 项目做了许多易用性的改进，目标是成为一个标准化的普通用户可以轻松使用的路由器系统。
建议使用 Ubuntu 系统作为编译环境，这里以 Ubuntu 18.04 作为例子，其他版本也是可以的。特别注意的是，整个编译过程，都是用普通用户操作，不要用 root 用户操作。</p>
<h3 id="切换到普通用户">切换到普通用户</h3>
<p>添加用户。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># Create a new user and follow prompts</span>
</span></span><span class="line"><span class="cl">adduser &lt;user&gt;
</span></span></code></pre></div><p>授予用户 root 权限，并切换为该用户。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># Add user to superuser group to unlock admin privileges</span>
</span></span><span class="line"><span class="cl">usermod -aG sudo &lt;user&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Then log in as the new user</span>
</span></span><span class="line"><span class="cl">su - &lt;user&gt;
</span></span></code></pre></div><h3 id="安装软件包">安装软件包</h3>
<p>安装编译所需要的软件包</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo apt install build-essential ecj fastjar file flex g++ gcc-multilib g++-multilib gawk gettext git git-core java-propose-classpath libelf-dev libncurses5-dev libncursesw5-dev libssl-dev python python3 python3-distutils subversion unzip wget zlib1g-dev rsync qemu-utils
</span></span></code></pre></div><h3 id="下载源码">下载源码</h3>
<p>下载 x-wrt 源码</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone https://github.com/x-wrt/x-wrt.git
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> x-wrt
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#更新代码tag:</span>
</span></span><span class="line"><span class="cl">git fetch origin
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#列出可以使用的版本tag:</span>
</span></span><span class="line"><span class="cl">git tag
</span></span><span class="line"><span class="cl"><span class="c1">#注意摁 q 键结束</span>
</span></span><span class="line"><span class="cl"><span class="c1">#或者直接获取最新发布版本</span>
</span></span><span class="line"><span class="cl">git describe --tags <span class="k">$(</span>git rev-list --tags --max-count<span class="o">=</span>1<span class="k">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#选择并切换到指定的版本tag:</span>
</span></span><span class="line"><span class="cl">git checkout -f &lt;tag-name&gt;
</span></span><span class="line"><span class="cl"><span class="c1">#例如</span>
</span></span><span class="line"><span class="cl">git checkout -f 21.10_b202112032317
</span></span><span class="line"><span class="cl"><span class="c1">#或者</span>
</span></span><span class="line"><span class="cl">git checkout -f <span class="k">$(</span>git describe --tags <span class="k">$(</span>git rev-list --tags --max-count<span class="o">=</span>1<span class="k">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#更新代码:</span>
</span></span><span class="line"><span class="cl">./scripts/feeds update -a
</span></span><span class="line"><span class="cl">./scripts/feeds install -a
</span></span></code></pre></div><p>下载 OpenClash 源码</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 同步源码</span>
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> package/luci-app-openclash/luci-app-openclash
</span></span><span class="line"><span class="cl">git pull
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 也可以直接拷贝 `luci-app-openclash` 文件夹至其他 `OpenWrt` 项目的 `Package` 目录下随固件编译</span>
</span></span></code></pre></div><h3 id="修改配置">修改配置</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 拷贝设备模板</span>
</span></span><span class="line"><span class="cl">cp feeds/x/rom/lede/config.mediatek.mt7622 .config
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 上面已经cp 拷贝了模版配置到 .config</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 例如 cp feeds/x/rom/lede/config.mediatek.mt7622 .config</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 下面继续操作和修改</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#1 执行</span>
</span></span><span class="line"><span class="cl">make menuconfig
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#2 进入 Target Profile 选择需要编译打包的设备型号，选择型号后立刻退出，保存</span>
</span></span></code></pre></div><p><img loading="lazy" src="https://jacob-1256058189.cos.ap-guangzhou.myqcloud.com/markdown/202408101800636.webp" alt=""  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1">#3 执行下面的命令修复 .config</span>
</span></span><span class="line"><span class="cl">sh feeds/x/rom/lede/fix-config.sh
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#4 再次执行 make menuconfig 然后立刻退出保存</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#5 最后一次 执行 make menuconfig 自定义选择你需要的软件包</span>
</span></span></code></pre></div><h3 id="配置模板">配置模板</h3>
<p>在上述准备好的模版配置文件的基础上，执行<code>make menuconfig</code>命令进行个性化定制，增删应用。定位到各个子菜单，选择对应的软件包。</p>
<p><img loading="lazy" src="https://jacob-1256058189.cos.ap-guangzhou.myqcloud.com/markdown/202408101800617.webp" alt=""  />
</p>
<h3 id="添加软件包">添加软件包</h3>
<p>要编译到固件里面，就要选择<code>&lt;*&gt;</code>，如果只选择<code>&lt;M&gt;</code>只是编译成软件包<code>ipk</code>，不会打包进入固件。
进入<code>LuCI - Applications</code>子菜单下面，选择自己想要的应用
常见的软件包：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-latex" data-lang="latex"><span class="line"><span class="cl">luci-app-aria2 ARRIA2 下载工具
</span></span><span class="line"><span class="cl">luci-app-ddns DDNS 工具
</span></span><span class="line"><span class="cl">luci-app-mwan3 MWAN3 负载均衡
</span></span><span class="line"><span class="cl">luci-app-openvpn OPENVPN
</span></span><span class="line"><span class="cl">luci-app-ksmbd Ksmbd 文件网络共享（samba 文件共享）
</span></span><span class="line"><span class="cl">luci-app-upnp UPNP 设置
</span></span><span class="line"><span class="cl">luci-app-wireguard WireGuard 配置界面
</span></span><span class="line"><span class="cl">luci-app-natcap 远程界面管理模块和全锥形 nat 实现模块
</span></span><span class="line"><span class="cl">luci-app-natflow-users 用户认证（用户流量显示）模块
</span></span><span class="line"><span class="cl">luci-app-openclash OpenClash 插件
</span></span></code></pre></div><p>进入<code>Kernel modules - USB Support</code>菜单，选择 USB 支持的驱动
进入<code>Kernel modules - Filesystems</code>菜单，选择需要支持的文件系统，比如 ext4,ntfs,vfat 等
进入<code>Kernel modules - Wireless Drivers</code>菜单，选择无线支持的驱动，如果需要挂卡的驱动，也是在这里找</p>
<h3 id="执行编译">执行编译</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">make -j1 <span class="nv">V</span><span class="o">=</span>s
</span></span><span class="line"><span class="cl"><span class="c1"># j1 为单核编译</span>
</span></span></code></pre></div><p>生成的包在<code>bin/targets/</code>下面
如果需要再次修改配置编译，只要不是换设备，都可以直接 <code>make menuconfig</code> 修改后就编译，如果需要修改设备，请从拷贝模版配置的地方重新开始配置。</p>
<h2 id="安装固件">安装固件</h2>
<p>从<code>bin/targets/</code>下载得到编译完成的<code>factory</code>固件
通过 SSH 连接到路由器，刷写 OpenWrt 固件，其中/tmp/factory.bin 替换为需要刷写的固件路径。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mtd -r write /tmp/factory.bin firmware
</span></span></code></pre></div><h2 id="参考文献">参考文献</h2>
<p><a href="https://blog.x-wrt.com/">https://blog.x-wrt.com/</a></p>
<p><a href="https://qust.me/post/ax6s/">https://qust.me/post/ax6s/</a></p>
<p><a href="https://github.com/vernesong/OpenClash">https://github.com/vernesong/OpenClash</a></p>
]]></content:encoded></item><item><title>自己编译 OpenWRT</title><link>https://weixiang.github.io/posts/compile-openwrt-yourself/</link><pubDate>Fri, 12 May 2023 14:21:36 +0800</pubDate><guid>https://weixiang.github.io/posts/compile-openwrt-yourself/</guid><description>以 X-WRT 为例，使用 Ubuntu 22.04 LTS 系统，自己为红米 AC2100 编译一个 OpenWRT 路由器固件。</description><content:encoded><![CDATA[<p>以 X-WRT 为例，使用 Ubuntu 22.04 LTS 系统，建议使用国外服务器编译。</p>
<h2 id="编译准备">编译准备</h2>
<p>不要用<code>root</code>用户进行编译操作，因此需要先新建一个用户，并且授予<code>root</code>权限</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># Login via SSH</span>
</span></span><span class="line"><span class="cl">ssh root@your_server_ip
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Create a new user and follow prompts</span>
</span></span><span class="line"><span class="cl">adduser &lt;user&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Add user to superuser group to unlock admin privileges</span>
</span></span><span class="line"><span class="cl">usermod -aG sudo &lt;user&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Then log in as the new user</span>
</span></span><span class="line"><span class="cl">su - &lt;user&gt;
</span></span></code></pre></div><p>更新软件包并安装依赖</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># Update package lists</span>
</span></span><span class="line"><span class="cl">sudo apt-get update
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Update installed packages</span>
</span></span><span class="line"><span class="cl">sudo apt-get upgrade
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo apt install build-essential ecj fastjar file flex g++ gcc-multilib g++-multilib gawk gettext git git-core java-propose-classpath libelf-dev libncurses5-dev libncursesw5-dev libssl-dev swig python3 python3-distutils subversion unzip wget zlib1g-dev rsync qemu-utils
</span></span></code></pre></div><p>下载源码</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone https://github.com/x-wrt/x-wrt.git
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> x-wrt
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#更新代码tag:</span>
</span></span><span class="line"><span class="cl">git fetch origin
</span></span><span class="line"><span class="cl">git fetch origin --tags
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#列出可以使用的版本tag:</span>
</span></span><span class="line"><span class="cl">git tag
</span></span><span class="line"><span class="cl"><span class="c1">#注意按 q 键结束</span>
</span></span><span class="line"><span class="cl"><span class="c1">#或者直接获取最新发布版本</span>
</span></span><span class="line"><span class="cl">git describe --tags <span class="k">$(</span>git rev-list --tags --max-count<span class="o">=</span>1<span class="k">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#选择并切换到指定的版本tag:</span>
</span></span><span class="line"><span class="cl">git checkout -f &lt;tag-name&gt;
</span></span><span class="line"><span class="cl"><span class="c1">#例如</span>
</span></span><span class="line"><span class="cl">git checkout -f 21.10_b202112032317
</span></span><span class="line"><span class="cl"><span class="c1">#或者</span>
</span></span><span class="line"><span class="cl">git checkout -f <span class="k">$(</span>git describe --tags <span class="k">$(</span>git rev-list --tags --max-count<span class="o">=</span>1<span class="k">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#更新代码:</span>
</span></span><span class="line"><span class="cl">./scripts/feeds update -a
</span></span><span class="line"><span class="cl">./scripts/feeds install -a
</span></span></code></pre></div><p>然后就可以使用<code>make menuconfig</code>进行固件配置，但是我们可以从配置模版开始会更轻松一些。</p>
<p>比如 ramips-mt7621 的设备可以用拷贝这个模版<code>feeds/x/rom/lede/config.ramips-mt7621</code> 内核分区限制小的设备，选用 <code>-nosymbol</code> 结尾的<code>config</code>配置模版。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 0 拷贝模板到根目录</span>
</span></span><span class="line"><span class="cl">cp feeds/x/rom/lede/config.ramips-mt7621 .config
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 1 执行</span>
</span></span><span class="line"><span class="cl">make menuconfig
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 2 进入 Target Profile 选择需要编译打包的设备型号，选择型号后立刻退出，保存</span>
</span></span></code></pre></div><p><img loading="lazy" src="https://jacob-1256058189.cos.ap-guangzhou.myqcloud.com/markdown/202408101754249.webp" alt=""  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1">#3 执行下面的命令修复 .config</span>
</span></span><span class="line"><span class="cl">sh feeds/x/rom/lede/fix-config.sh
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#4 再次执行 make menuconfig 然后立刻退出保存</span>
</span></span><span class="line"><span class="cl">make menuconfig
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#5 最后一次 执行 make menuconfig 自定义选择你需要的软件包</span>
</span></span><span class="line"><span class="cl">make menuconfig
</span></span></code></pre></div><h2 id="配置目标可选项">配置目标（可选项）</h2>
<p>在上述准备好的模版配置文件的基础上，执行<code>make menuconfig</code>命令进行个性化定制，增删应用。</p>
<p>定位到各个子菜单，选择对应的软件包。</p>
<p><img loading="lazy" src="https://jacob-1256058189.cos.ap-guangzhou.myqcloud.com/markdown/202408101754239.webp" alt=""  />
</p>
<h3 id="添加自定义源">添加自定义源</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 进入openwrt目录</span>
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> ~/openwrt
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 添加自定义源</span>
</span></span><span class="line"><span class="cl">cat &gt;&gt; feeds.conf.default <span class="s">&lt;&lt;EOF
</span></span></span><span class="line"><span class="cl"><span class="s">src-git kenzo https://github.com/kenzok8/openwrt-packages
</span></span></span><span class="line"><span class="cl"><span class="s">src-git passwall https://github.com/xiaorouji/openwrt-passwall
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span></code></pre></div><p>更新下载软件仓库的源码到本地，并安装自定义源包含的软件包</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">./scripts/feeds update -a <span class="o">&amp;&amp;</span> ./scripts/feeds install -a
</span></span></code></pre></div><h3 id="添加插件">添加插件</h3>
<p>首先，进入<code>make menuconfig</code>菜单</p>
<p><strong>要编译到固件里面，就要选择<code>&lt;\*&gt;</code>，如果只选择<code>&lt;M&gt;</code>只是编译成软件包<code>ipk</code>，不会打包进入固件。</strong></p>
<p>进入<code>LuCI - Applications</code>子菜单下面，选择自己想要的应用</p>
<p>进入<code>Kernel modules - USB Support</code>菜单，选择 USB 支持的驱动</p>
<p>进入<code>Kernel modules - Filesystems</code>菜单，选择需要支持的文件系统，比如<code>ext4,ntfs,vfat</code>等</p>
<p>进入<code>Kernel modules - Wireless Drivers</code>菜单，选择无线支持的驱动，如果需要挂卡的驱动，也是在这里找</p>
<h3 id="单独添加软件包">单独添加软件包</h3>
<p>如果需要单独添加软件，请拉取源码到 package 目录之下。示例如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 添加 OpenAppFilter 应用过滤插件</span>
</span></span><span class="line"><span class="cl">git clone https://github.com/destan19/OpenAppFilter package/OpenAppFilter
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 添加 OpenClash</span>
</span></span><span class="line"><span class="cl">git clone https://github.com/vernesong/OpenClash.git
</span></span><span class="line"><span class="cl">mv OpenClash/luci-app-openclash package/
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 添加 eqos</span>
</span></span><span class="line"><span class="cl">git clone https://github.com/zhaojh329/eqos.git package/
</span></span></code></pre></div><p>执行<code>make menuconfig</code>进行配置</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">OpenClash:
</span></span><span class="line"><span class="cl">LuCI &gt; Applications &gt; luci-app-openclash
</span></span><span class="line"><span class="cl">Kernel modules &gt; Network Support &gt; kmod-tun
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">OpenClash 需要排除 dnsmasq，安装 dnsmasq-full，不排除会冲突:
</span></span><span class="line"><span class="cl">Base system &gt; dnsmasq
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">eqos:
</span></span><span class="line"><span class="cl">LuCI &gt; Applications &gt; luci-app-eqos
</span></span><span class="line"><span class="cl">Network &gt; eqos
</span></span></code></pre></div><h3 id="设置默认主题">设置默认主题</h3>
<p>注：此操作请在编译前执行，设置 ar­gon 为默认主题，以此为例举一反三</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 删除自定义源默认的 argon 主题</span>
</span></span><span class="line"><span class="cl">rm -rf package/lean/luci-theme-argon
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 部分第三方源自带 argon 主题，上面命令删除不掉的请运行下面命令</span>
</span></span><span class="line"><span class="cl">find ./ -name luci-theme-argon <span class="p">|</span> xargs rm -rf<span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 针对 LEDE 项目拉取 argon 原作者的源码</span>
</span></span><span class="line"><span class="cl">git clone -b 18.06 https://github.com/jerrykuku/luci-theme-argon.git package/lean/luci-theme-argon
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 替换默认主题为 luci-theme-argon</span>
</span></span><span class="line"><span class="cl">sed -i <span class="s1">&#39;s/luci-theme-bootstrap/luci-theme-argon/&#39;</span> feeds/luci/collections/luci/Makefile
</span></span></code></pre></div><h3 id="设置路由器默认的-lan-ip">设置路由器默认的 LAN IP</h3>
<p>注：此操作请在编译前执行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 设置默认IP为 192.168.199.1</span>
</span></span><span class="line"><span class="cl">sed -i <span class="s1">&#39;s/192.168.1.1/192.168.199.1/g&#39;</span> package/base-files/files/bin/config_generate
</span></span></code></pre></div><h2 id="执行编译">执行编译</h2>
<p>命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">make
</span></span></code></pre></div><p>或者</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># -j1：单线程编译</span>
</span></span><span class="line"><span class="cl">make -j1 <span class="nv">V</span><span class="o">=</span>s
</span></span></code></pre></div><p>单线程编译可提高编译成功率，但过程非常漫长，也完全取决于机器的性能。</p>
<p>编译完成后固件输出路径：<code>bin/targets/</code>下面。</p>
<p>如果需要再次修改配置编译，只要不是换设备，都可以直接 <code>make menuconfig</code> 修改后就编译，如果需要修改设备，请从拷贝模版配置的地方重新开始配置。</p>
<h3 id="二次编译步骤">二次编译步骤</h3>
<p>更新本地编译环境</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 更新软件列表、升级软件包</span>
</span></span><span class="line"><span class="cl">sudo sh -c <span class="s2">&#34;apt update &amp;&amp; apt upgrade -y&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 拉取最新源码</span>
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> ~/openwrt <span class="o">&amp;&amp;</span> git pull
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 更新下载安装订阅源包含的软件包</span>
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> ~/openwrt
</span></span><span class="line"><span class="cl">./scripts/feeds update -a <span class="o">&amp;&amp;</span> ./scripts/feeds install -a
</span></span></code></pre></div><p>清理旧文件</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 删除/bin和/build_dir目录中的文件</span>
</span></span><span class="line"><span class="cl">make clean
</span></span></code></pre></div><p>如果要更换架构，例如要从 <code>x86_64</code> 换到 <code>MediaTek Ralink MIPS</code> 建议执行以下命令深度清理 <code>/bin</code> 和 <code>/build_dir</code> 目录的中的文件 (<code>make clean</code>) 以及 <code>/staging_dir</code>、<code>/toolchain</code>、<code>/tmp</code> 和 <code>/logs</code> 中的文件。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">make dirclean
</span></span></code></pre></div><p>如果需要对组件重新调整，则建议先删除旧配置</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">rm -rf ./tmp <span class="o">&amp;&amp;</span> rm -rf .config
</span></span></code></pre></div><p>根据自己的定制需求，再次调整 Open­Wrt 系统组件</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">make menuconfig
</span></span></code></pre></div><p>下载编译所需的软件包</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">make download -j8 <span class="nv">V</span><span class="o">=</span>s
</span></span></code></pre></div><p>编译 Open­Wrt 固件</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">make -j<span class="k">$(</span>nproc<span class="k">)</span> <span class="o">||</span> make -j1 <span class="o">||</span> make -j1 <span class="nv">V</span><span class="o">=</span>s
</span></span></code></pre></div><p>二次编译可以优先使用多线程，报错会自动使用单线程，仍然报错会单线程执行编译并输出详细日志。</p>
<h2 id="附录">附录</h2>
<h3 id="常用插件列表">常用插件列表</h3>
<p>在调整 Open­Wrt 系统组件时：<code>[*]</code>表示编译软件包并加入到固件；<code>[M]</code> 表示编译软件包但不加入固件；<code>[ ]</code> 则表示不对软件包进行任何设置。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 常见</span>
</span></span><span class="line"><span class="cl">luci-app-aria2 ARRIA2下载工具
</span></span><span class="line"><span class="cl">luci-app-ddns DDNS工具
</span></span><span class="line"><span class="cl">luci-app-mwan3 MWAN3负载均衡
</span></span><span class="line"><span class="cl">luci-app-openvpn OPENVPN
</span></span><span class="line"><span class="cl">luci-app-ksmbd Ksmbd文件网络共享（samba文件共享）
</span></span><span class="line"><span class="cl">luci-app-upnp UPNP设置
</span></span><span class="line"><span class="cl">luci-app-wireguard WireGuard配置界面
</span></span><span class="line"><span class="cl">luci-app-natcap 远程界面管理模块和全锥形nat实现模块
</span></span><span class="line"><span class="cl">luci-app-natflow-users 用户认证（用户流量显示）模块
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">## 插件类</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Applications ---&gt; luci-app-accesscontrol <span class="c1">#上网时间控制</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Applications ---&gt; luci-app-adbyby-plus   <span class="c1">#去广告</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Applications ---&gt; luci-app-arpbind  <span class="c1">#IP/MAC绑定</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Applications ---&gt; luci-app-autoreboot  <span class="c1">#高级重启</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Applications ---&gt; luci-app-aliddns   <span class="c1">#阿里DDNS客户端</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Applications ---&gt; luci-app-ddns   <span class="c1">#动态域名 DNS</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Applications ---&gt; luci-app-filetransfer  <span class="c1">#文件传输</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Applications ---&gt; luci-app-firewall   <span class="c1">#添加防火墙</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Applications ---&gt; luci-app-frpc   <span class="c1">#内网穿透 Frp</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Applications ---&gt; luci-app-mwan3   <span class="c1">#MWAN负载均衡</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Applications ---&gt; luci-app-nlbwmon   <span class="c1">#网络带宽监视器</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Applications ---&gt; luci-app-ramfree  <span class="c1">#释放内存</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Applications ---&gt; luci-app-samba   <span class="c1">#网络共享(Samba)</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Applications ---&gt; luci-app-sqm  <span class="c1">#流量智能队列管理(QOS)</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Applications ---&gt; luci-app-openclash <span class="c1">#你懂的那只猫</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Applications ---&gt; luci-app-dnsfilter <span class="c1">#广告过滤</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Applications ---&gt; luci-app-passwall <span class="c1">#不敢解释</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Applications ---&gt; luci-app-mtwifi <span class="c1">#闭源Wi-Fi驱动</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Applications ---&gt; luci-app-eqos <span class="c1">#根据IP控制网速</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Applications ---&gt; luci-app-syncdial <span class="c1">#薛定谔的多拨应用</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Applications ---&gt; luci-app-zerotier <span class="c1">#虚拟局域网</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Applications ---&gt; luci-app-oaf <span class="c1">#应用过滤神器</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Applications ---&gt; luci-app-watchcat <span class="c1">#断网检测功能与定时重启</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Applications ---&gt; luci-app-wol   <span class="c1">#WOL网络唤醒</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Applications ---&gt; luci-app-wrtbwmon  <span class="c1">#实时流量监测</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Applications ---&gt; luci-app-upnp   <span class="c1">#通用即插即用UPnP(端口自动转发)</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Applications ---&gt; luci-app-argon-config <span class="c1">#Argon主题设置</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 常用主题类</span>
</span></span><span class="line"><span class="cl">LuCI ---&gt; Themes ---&gt; luci-theme-argon
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 网络相关 (普通用户用不上）</span>
</span></span><span class="line"><span class="cl">Network ---&gt; IP Addresses and Names ---&gt; ddns-scripts_cloudflare.com-v4
</span></span><span class="line"><span class="cl">Network ---&gt; IP Addresses and Names ---&gt;  bind-dig
</span></span><span class="line"><span class="cl">Network ---&gt; Routing and Rediction ---&gt; ip-full
</span></span><span class="line"><span class="cl">Network ---&gt; File Transfer ---&gt; curl
</span></span><span class="line"><span class="cl">Network ---&gt; File Transfer ---&gt; wget-ssl
</span></span><span class="line"><span class="cl">Network ---&gt; iperf3
</span></span><span class="line"><span class="cl">Network ---&gt; ipset
</span></span><span class="line"><span class="cl">Network ---&gt; socat <span class="c1">#多功能的网络工具</span>
</span></span><span class="line"><span class="cl">Base system --&gt; dnsmasq-full <span class="c1">#DNS缓存和DHCP服务（dnsmasq-full和dnsmasq二者不可共存）</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 工具类 (普通用户用不上）</span>
</span></span><span class="line"><span class="cl">Utilities --&gt; acpid  <span class="c1">#电源管理接口（适用于x86平台）</span>
</span></span><span class="line"><span class="cl">Utilities --&gt; Editors --&gt; nano <span class="c1">#Nano 编辑器</span>
</span></span><span class="line"><span class="cl">Utilities --&gt; Shells --&gt; bash <span class="c1">#命令解释程序</span>
</span></span><span class="line"><span class="cl">Utilities --&gt; disc --&gt; eject <span class="c1">#弹出可移动介质</span>
</span></span><span class="line"><span class="cl">Utilities --&gt; disc --&gt; fdisk <span class="c1">#MBR分区工具</span>
</span></span><span class="line"><span class="cl">Utilities --&gt; disc --&gt; gdisk <span class="c1">#GBT分区工具</span>
</span></span><span class="line"><span class="cl">Utilities --&gt; disc --&gt; lsblk <span class="c1">#列出磁盘设备及分区查看工具</span>
</span></span><span class="line"><span class="cl">Utilities --&gt; Filesystem --&gt; resize2fs <span class="c1">#调整文件系统大小</span>
</span></span><span class="line"><span class="cl">Utilities --&gt; Filesystem --&gt; e2fsprogs <span class="c1">#Ext2（及Ext3/4）文件系统工具</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># IPv6（未来运营商可能不再提供 IPv4 公网地址，有远程访问需求的建议加入）</span>
</span></span><span class="line"><span class="cl">Extra packages ---&gt; ipv6helper （勾选此项即可，下面几项自动勾选）
</span></span><span class="line"><span class="cl">Network ---&gt; odhcp6c
</span></span><span class="line"><span class="cl">Network ---&gt; odhcpd-ipv6only
</span></span><span class="line"><span class="cl">LuCI ---&gt; Protocols ---&gt; luci-proto-ipv6
</span></span><span class="line"><span class="cl">LuCI ---&gt; Protocols ---&gt; luci-proto-ppp
</span></span></code></pre></div><h2 id="参考文献">参考文献</h2>
<p><a href="https://blog.x-wrt.com/docs/build/">https://blog.x-wrt.com/docs/build/</a></p>
<p><a href="https://www.moewah.com/archives/4003.html">https://www.moewah.com/archives/4003.html</a></p>
<p><a href="https://ghost.org/docs/install/ubuntu/">https://ghost.org/docs/install/ubuntu/</a></p>
<p><a href="https://github.com/skyformat99/eqos/blob/master/README_ZH.md">https://github.com/skyformat99/eqos/blob/master/README_ZH.md</a></p>
<p><a href="https://xiaohai.co/build-openwrt-firmware/">https://xiaohai.co/build-openwrt-firmware/</a></p>
]]></content:encoded></item><item><title>OpenWrt 安装 Shadowsocks-Libev 作透明代理</title><link>https://weixiang.github.io/posts/install-shadowsocks-libev-as-a-transparent-proxy-on-openwrt/</link><pubDate>Tue, 06 Sep 2022 14:59:51 +0800</pubDate><guid>https://weixiang.github.io/posts/install-shadowsocks-libev-as-a-transparent-proxy-on-openwrt/</guid><description>Shadowsocks 是一种基于 Socks5 代理方式的加密传输协议，透明代理是一种位于用户设备与互联网之间的服务器，能够在不改变请求或响应内容且无需用户配置的情况下，拦截并管理所有互联网流量，用于内容过滤、安全监控和缓存。</description><content:encoded><![CDATA[<h2 id="安装-shadowsocks-libev-插件">安装 Shadowsocks-libev 插件</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1">#我们使用https下载软件源</span>
</span></span><span class="line"><span class="cl">sed -i <span class="s1">&#39;s/http:/https:/g&#39;</span> /etc/opkg/distfeeds.conf
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#更新官方源信息</span>
</span></span><span class="line"><span class="cl">opkg --no-check-certificate update
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#列出软件包</span>
</span></span><span class="line"><span class="cl">opkg list
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#安装</span>
</span></span><span class="line"><span class="cl">opkg --no-check-certificate install luci-app-shadowsocks-libev
</span></span><span class="line"><span class="cl">opkg --no-check-certificate install shadowsocks-libev-config
</span></span><span class="line"><span class="cl">opkg --no-check-certificate install shadowsocks-libev-ss-local
</span></span><span class="line"><span class="cl">opkg --no-check-certificate install shadowsocks-libev-ss-redir
</span></span><span class="line"><span class="cl">opkg --no-check-certificate install shadowsocks-libev-ss-rules
</span></span><span class="line"><span class="cl">opkg --no-check-certificate install shadowsocks-libev-ss-server
</span></span><span class="line"><span class="cl">opkg --no-check-certificate install shadowsocks-libev-ss-tunnel
</span></span></code></pre></div><h2 id="配置-shadowsocks-libev">配置 Shadowsocks-libev</h2>
<p>进入<code>Shadowsocks-libev</code>插件页进行配置</p>
<ol>
<li>在<code>Remote Servers</code>页面，编辑默认的服务器信息，改为自己的，将<code>Disable</code>取消勾选。</li>
<li>在<code>Local Instances</code>页面，启用<code>ss_local.cfg013015</code>（后面为随机数字）。</li>
</ol>
<p>此时已经可以通过 Socks5 连接到路由器来使用代理。</p>
<h2 id="配置透明代理">配置透明代理</h2>
<ol>
<li>在<code>Local Instances</code>页面，启用<code>ss_redir.hi</code>。</li>
<li>在<code>Redir Rules - 常规设置</code>页面，将<code>Disable</code>取消勾选。</li>
<li>在<code>Redir Rules - Destination Settings</code>页面，将<code>Dst default</code>改为<code>forward</code>。</li>
<li>同上一页面，在<code>Dst ip/net bypass</code>填写需要排除的 IP</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl"># 常用排除 IP
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">192.168.0.0/16
</span></span><span class="line"><span class="cl">172.16.0.0/12
</span></span><span class="line"><span class="cl">10.0.0.0/8
</span></span></code></pre></div>]]></content:encoded></item></channel></rss>